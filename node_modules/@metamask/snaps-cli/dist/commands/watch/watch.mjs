import { isFile } from "@metamask/snaps-utils/node";
import { CommandError } from "../../errors.mjs";
import { executeSteps, info } from "../../utils/index.mjs";
import { getServer } from "../../webpack/index.mjs";
import { watch } from "./implementation.mjs";
const steps = [
    {
        name: 'Checking the input file.',
        task: async ({ config }) => {
            const { input } = config;
            if (!(await isFile(input))) {
                throw new CommandError(`Input file not found: "${input}". Make sure that the "input" field in your snap config is correct.`);
            }
        },
    },
    {
        name: 'Starting the development server.',
        condition: ({ config }) => config.server.enabled,
        task: async ({ config, options, spinner }) => {
            const server = getServer(config);
            const { port } = await server.listen(options.port ?? config.server.port);
            info(`The server is listening on http://localhost:${port}.`, spinner);
        },
    },
    {
        name: 'Building the snap bundle.',
        task: async ({ config, spinner }) => {
            await watch(config, { spinner });
        },
    },
];
/**
 * Watch a directory and its subdirectories for changes, and build when files
 * are added or changed.
 *
 * Ignores 'node_modules' and dotfiles.
 * Creates destination directory if it doesn't exist.
 *
 * @param config - The config object.
 * @param options - The options object.
 */
export async function watchHandler(config, options) {
    await executeSteps(steps, { config, options });
}
//# sourceMappingURL=watch.mjs.map