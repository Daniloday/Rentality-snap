"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = void 0;
const path_1 = require("path");
const webpack_1 = require("../../webpack/index.cjs");
/**
 * Build the snap bundle and watch for changes. This uses Webpack to build the
 * bundle.
 *
 * @param config - The config object.
 * @param options - The Webpack options.
 * @returns A promise that resolves when the bundle is built for the first time.
 * The promise resolves with a Webpack watching instance that can be used to
 * close the watcher.
 */
async function watch(config, options) {
    const compiler = await (0, webpack_1.getCompiler)(config, {
        evaluate: config.evaluate,
        watch: true,
        spinner: options?.spinner,
    });
    return new Promise((resolve, reject) => {
        compiler.watch({
            ignored: [
                '**/node_modules/**/*',
                `**/${(0, path_1.basename)(config.output.path)}/**/*`,
            ],
        }, (watchError) => {
            if (watchError) {
                reject(watchError);
                return;
            }
            resolve(compiler.watching);
        });
    });
}
exports.watch = watch;
//# sourceMappingURL=implementation.cjs.map