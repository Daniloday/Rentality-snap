"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchHandler = void 0;
const node_1 = require("@metamask/snaps-utils/node");
const errors_1 = require("../../errors.cjs");
const utils_1 = require("../../utils/index.cjs");
const webpack_1 = require("../../webpack/index.cjs");
const implementation_1 = require("./implementation.cjs");
const steps = [
    {
        name: 'Checking the input file.',
        task: async ({ config }) => {
            const { input } = config;
            if (!(await (0, node_1.isFile)(input))) {
                throw new errors_1.CommandError(`Input file not found: "${input}". Make sure that the "input" field in your snap config is correct.`);
            }
        },
    },
    {
        name: 'Starting the development server.',
        condition: ({ config }) => config.server.enabled,
        task: async ({ config, options, spinner }) => {
            const server = (0, webpack_1.getServer)(config);
            const { port } = await server.listen(options.port ?? config.server.port);
            (0, utils_1.info)(`The server is listening on http://localhost:${port}.`, spinner);
        },
    },
    {
        name: 'Building the snap bundle.',
        task: async ({ config, spinner }) => {
            await (0, implementation_1.watch)(config, { spinner });
        },
    },
];
/**
 * Watch a directory and its subdirectories for changes, and build when files
 * are added or changed.
 *
 * Ignores 'node_modules' and dotfiles.
 * Creates destination directory if it doesn't exist.
 *
 * @param config - The config object.
 * @param options - The options object.
 */
async function watchHandler(config, options) {
    await (0, utils_1.executeSteps)(steps, { config, options });
}
exports.watchHandler = watchHandler;
//# sourceMappingURL=watch.cjs.map