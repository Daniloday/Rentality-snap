{"version":3,"file":"build.cjs","sourceRoot":"","sources":["../../../src/commands/build/build.ts"],"names":[],"mappings":";;;AAAA,qDAAoD;AACpD,+BAA8C;AAG9C,6CAA4C;AAE5C,iDAAiD;AACjD,4CAAmC;AACnC,yDAAyC;AAMzC,MAAM,KAAK,GAAwB;IACjC;QACE,IAAI,EAAE,0BAA0B;QAChC,IAAI,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE;YACzB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;YAEzB,IAAI,CAAC,CAAC,MAAM,IAAA,aAAM,EAAC,KAAK,CAAC,CAAC,EAAE,CAAC;gBAC3B,MAAM,IAAI,qBAAY,CACpB,0BAA0B,KAAK,qEAAqE,CACrG,CAAC;YACJ,CAAC;QACH,CAAC;KACF;IACD;QACE,IAAI,EAAE,2BAA2B;QACjC,IAAI,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;YAClC,qEAAqE;YACrE,QAAQ;YACR,OAAO,MAAM,IAAA,sBAAK,EAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC;KACF;IACD;QACE,IAAI,EAAE,6BAA6B;QACnC,SAAS,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ;QAC1C,IAAI,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;YAClC,MAAM,IAAI,GAAG,IAAA,cAAW,EACtB,OAAO,CAAC,GAAG,EAAE,EACb,MAAM,CAAC,MAAM,CAAC,IAAI,EAClB,MAAM,CAAC,MAAM,CAAC,QAAQ,CACvB,CAAC;YAEF,MAAM,IAAA,eAAQ,EAAC,IAAI,CAAC,CAAC;YAErB,IAAA,YAAI,EAAC,qCAAqC,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC;KACF;CACO,CAAC;AAEX;;;;;;;;GAQG;AACI,KAAK,UAAU,YAAY,CAAC,MAAuB;IACxD,OAAO,MAAM,IAAA,oBAAY,EAAC,KAAK,EAAE;QAC/B,MAAM;KACP,CAAC,CAAC;AACL,CAAC;AAJD,oCAIC","sourcesContent":["import { isFile } from '@metamask/snaps-utils/node';\nimport { resolve as pathResolve } from 'path';\n\nimport type { ProcessedConfig, ProcessedWebpackConfig } from '../../config';\nimport { CommandError } from '../../errors';\nimport type { Steps } from '../../utils';\nimport { executeSteps, info } from '../../utils';\nimport { evaluate } from '../eval';\nimport { build } from './implementation';\n\ntype BuildContext = {\n  config: ProcessedWebpackConfig;\n};\n\nconst steps: Steps<BuildContext> = [\n  {\n    name: 'Checking the input file.',\n    task: async ({ config }) => {\n      const { input } = config;\n\n      if (!(await isFile(input))) {\n        throw new CommandError(\n          `Input file not found: \"${input}\". Make sure that the \"input\" field in your snap config is correct.`,\n        );\n      }\n    },\n  },\n  {\n    name: 'Building the snap bundle.',\n    task: async ({ config, spinner }) => {\n      // We don't evaluate the bundle here, because it's done in a separate\n      // step.\n      return await build(config, { evaluate: false, spinner });\n    },\n  },\n  {\n    name: 'Evaluating the snap bundle.',\n    condition: ({ config }) => config.evaluate,\n    task: async ({ config, spinner }) => {\n      const path = pathResolve(\n        process.cwd(),\n        config.output.path,\n        config.output.filename,\n      );\n\n      await evaluate(path);\n\n      info(`Snap bundle evaluated successfully.`, spinner);\n    },\n  },\n] as const;\n\n/**\n * Build all files in the given source directory to the given destination\n * directory.\n *\n * This creates the destination directory if it doesn't exist.\n *\n * @param config - The config object.\n * @returns Nothing.\n */\nexport async function buildHandler(config: ProcessedConfig): Promise<void> {\n  return await executeSteps(steps, {\n    config,\n  });\n}\n"]}