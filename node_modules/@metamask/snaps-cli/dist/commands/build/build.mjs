import { isFile } from "@metamask/snaps-utils/node";
import { resolve as pathResolve } from "path";
import { CommandError } from "../../errors.mjs";
import { executeSteps, info } from "../../utils/index.mjs";
import { evaluate } from "../eval/index.mjs";
import { build } from "./implementation.mjs";
const steps = [
    {
        name: 'Checking the input file.',
        task: async ({ config }) => {
            const { input } = config;
            if (!(await isFile(input))) {
                throw new CommandError(`Input file not found: "${input}". Make sure that the "input" field in your snap config is correct.`);
            }
        },
    },
    {
        name: 'Building the snap bundle.',
        task: async ({ config, spinner }) => {
            // We don't evaluate the bundle here, because it's done in a separate
            // step.
            return await build(config, { evaluate: false, spinner });
        },
    },
    {
        name: 'Evaluating the snap bundle.',
        condition: ({ config }) => config.evaluate,
        task: async ({ config, spinner }) => {
            const path = pathResolve(process.cwd(), config.output.path, config.output.filename);
            await evaluate(path);
            info(`Snap bundle evaluated successfully.`, spinner);
        },
    },
];
/**
 * Build all files in the given source directory to the given destination
 * directory.
 *
 * This creates the destination directory if it doesn't exist.
 *
 * @param config - The config object.
 * @returns Nothing.
 */
export async function buildHandler(config) {
    return await executeSteps(steps, {
        config,
    });
}
//# sourceMappingURL=build.mjs.map