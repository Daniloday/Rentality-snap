"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateHandler = void 0;
const node_1 = require("@metamask/snaps-utils/node");
const path_1 = require("path");
const errors_1 = require("../../errors.cjs");
const utils_1 = require("../../utils/index.cjs");
const implementation_1 = require("./implementation.cjs");
const steps = [
    {
        name: 'Checking the input file.',
        task: async ({ input }) => {
            if (!(await (0, node_1.isFile)(input))) {
                const relativePath = (0, utils_1.getRelativePath)(input);
                throw new errors_1.CommandError(`Input file not found: "${relativePath}". Make sure that the "input" field in your snap config or the specified input file is correct.`);
            }
        },
    },
    {
        name: 'Evaluating the snap bundle.',
        task: async ({ input, spinner }) => {
            await (0, implementation_1.evaluate)(input);
            spinner.succeed('Snap bundle evaluated successfully.');
        },
    },
];
/**
 * Returns the path to the bundle, based on the config and options.
 *
 * - If `options.input` is specified, it is used as the bundle path.
 * - Otherwise, the bundle path is resolved from the config's output path and
 * filename.
 *
 * @param config - The processed config object.
 * @param options - The eval options.
 * @returns The path to the bundle.
 */
function getBundlePath(config, options) {
    if (options.input) {
        return (0, path_1.resolve)(process.cwd(), options.input);
    }
    return (0, path_1.resolve)(config.output.path, config.output.filename);
}
/**
 * Runs the snap in a worker, to ensure SES compatibility.
 *
 * @param config - The processed config object.
 * @param options - The eval options.
 * @returns A promise that resolves once the eval has finished.
 * @throws If the eval failed.
 */
async function evaluateHandler(config, options = {}) {
    const input = getBundlePath(config, options);
    await (0, utils_1.executeSteps)(steps, { input });
}
exports.evaluateHandler = evaluateHandler;
//# sourceMappingURL=eval.cjs.map