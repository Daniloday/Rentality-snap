{"version":3,"file":"implementation.cjs","sourceRoot":"","sources":["../../../src/commands/eval/implementation.ts"],"names":[],"mappings":";;;AAAA,qDAA+E;AAC/E,iCAA4B;AAE5B,6CAA4C;AAE5C;;;;;;;;GAQG;AACI,KAAK,UAAU,QAAQ,CAAC,IAAY;IACzC,IAAI,CAAC;QACH,OAAO,MAAM,IAAA,iBAAU,EAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAAC,OAAO,SAAS,EAAE,CAAC;QACnB,IAAI,SAAS,YAAY,oBAAa,EAAE,CAAC;YACvC,MAAM,IAAI,qBAAY,CACpB,qLAAqL,IAAA,aAAM,EACzL,IAAA,WAAG,EAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,EAC5B,CAAC,CACF,EAAE,CACJ,CAAC;QACJ,CAAC;QAED,sEAAsE;QACtE,oBAAoB;QACpB,MAAM,SAAS,CAAC;IAClB,CAAC;AACH,CAAC;AAjBD,4BAiBC","sourcesContent":["import { evalBundle, SnapEvalError, indent } from '@metamask/snaps-utils/node';\nimport { red } from 'chalk';\n\nimport { CommandError } from '../../errors';\n\n/**\n * Evaluate the given bundle in the SES environment. This is a wrapper around\n * {@link evalBundle} that throws a {@link CommandError} if the bundle cannot be\n * evaluated.\n *\n * @param path - The path to the bundle.\n * @returns The eval result.\n * @throws If the bundle cannot be evaluated.\n */\nexport async function evaluate(path: string) {\n  try {\n    return await evalBundle(path);\n  } catch (evalError) {\n    if (evalError instanceof SnapEvalError) {\n      throw new CommandError(\n        `Failed to evaluate snap bundle in SES. This is likely due to an incompatibility with the SES environment in your snap.\\nReceived the following error from the SES environment:\\n\\n${indent(\n          red(evalError.output.stderr),\n          2,\n        )}`,\n      );\n    }\n\n    // If the error is not a `SnapEvalError`, we don't know what it is, so\n    // we just throw it.\n    throw evalError;\n  }\n}\n"]}