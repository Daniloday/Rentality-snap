"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.manifestHandler = void 0;
const node_1 = require("@metamask/snaps-utils/node");
const errors_1 = require("../../errors.cjs");
const utils_1 = require("../../utils/index.cjs");
const implementation_1 = require("./implementation.cjs");
const steps = [
    {
        name: 'Checking the input file.',
        task: async ({ input }) => {
            if (!(await (0, node_1.isFile)(input))) {
                throw new errors_1.CommandError(`Manifest file not found: "${input}". Make sure that the \`snap.manifest.json\` file exists.`);
            }
        },
    },
    {
        name: 'Validating the snap manifest.',
        task: async ({ input, config, options, spinner }) => {
            const write = getWriteManifest(config, options);
            const valid = await (0, implementation_1.manifest)(input, write, spinner);
            if (valid) {
                spinner.succeed('The snap manifest file is valid.');
            }
        },
    },
];
/**
 * Get whether to write the manifest to disk.
 *
 * @param config - The config object.
 * @param options - The options object.
 * @returns Whether to write the manifest to disk.
 */
function getWriteManifest(config, options) {
    if (typeof options.fix === 'boolean') {
        return options.fix;
    }
    return config.legacy?.writeManifest ?? false;
}
/**
 * Validates a snap.manifest.json file. Attempts to fix the manifest and write
 * the fixed version to disk if `writeManifest` is true. Throws if validation
 * fails.
 *
 * @param config - The config object.
 * @param options - The options object.
 */
async function manifestHandler(config, options) {
    await (0, utils_1.executeSteps)(steps, {
        input: config.manifest.path,
        config,
        options,
    });
}
exports.manifestHandler = manifestHandler;
//# sourceMappingURL=manifest.cjs.map