{"version":3,"file":"serve.mjs","sourceRoot":"","sources":["../../../src/commands/serve/serve.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,IAAI,EAAE,8BAAoB;AACnC,OAAO,EAAE,SAAS,EAAE,gCAAsB;AAS1C;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,MAAuB,EACvB,OAAqB;IAErB,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAEjC,6EAA6E;IAC7E,wDAAwD;IACxD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAEnD,IAAI,CAAC,+CAA+C,IAAI,GAAG,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["import type { ProcessedConfig } from '../../config';\nimport { info } from '../../utils';\nimport { getServer } from '../../webpack';\n\ntype ServeOptions = {\n  /**\n   * The port to listen on.\n   */\n  port: number;\n};\n\n/**\n * Starts a local, static HTTP server on the given port with the given root\n * directory.\n *\n * @param config - The config object.\n * @param options - The options object.\n */\nexport async function serveHandler(\n  config: ProcessedConfig,\n  options: ServeOptions,\n): Promise<void> {\n  const server = getServer(config);\n\n  // If the `configPort` is `0`, the OS will choose a random port for us, so we\n  // need to get the port from the server after it starts.\n  const { port } = await server.listen(options.port);\n\n  info(`The server is listening on http://localhost:${port}.`);\n}\n"]}