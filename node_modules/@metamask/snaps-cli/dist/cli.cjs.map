{"version":3,"file":"cli.cjs","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":";;;;;;AAAA,6DAA6D;AAC7D,oFAA2D;AAE3D,oDAA4B;AAC5B,kDAA0B;AAC1B,2CAAwC;AAExC,8DAAkC;AAClC,yCAA2C;AAC3C,6CAAsE;AAEtE;;;;;GAKG;AACH,SAAgB,gBAAgB,CAC9B,cAAsB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAE9C,MAAM,YAAY,GAAG,sBAAW,CAAC,OAAO,CAAC,IAAI,CAAC;IAC9C,MAAM,cAAc,GAAI,gBAAM,CAAC,UAAU,CAAC,YAAY,CAAY,CAAC,MAAM,EAAE,CAAC;IAE5E,IAAI,CAAC,gBAAM,CAAC,SAAS,CAAC,WAAW,EAAE,YAAY,CAAC,EAAE,CAAC;QACjD,IAAA,aAAK,EACH,gBAAgB,WAAW,sCAAsC,cAAc,YAAY,CAC5F,CAAC;QACF,6CAA6C;QAC7C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC;AAbD,4CAaC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,GAAG,CAAC,IAAc,EAAE,QAAa;IACrD,gBAAgB,EAAE,CAAC;IAEnB,MAAM,IAAA,eAAK,EAAC,IAAA,iBAAO,EAAC,IAAI,CAAC,CAAC;SACvB,UAAU,CAAC,SAAS,CAAC;SACrB,KAAK,CAAC,+BAA+B,CAAC;SAEtC,OAAO,CAAC,UAAU,EAAE,8CAA8C,CAAC;SACnE,OAAO,CACN,0CAA0C,EAC1C,2FAA2F,CAC5F;SACA,OAAO,CAAC,mBAAmB,EAAE,6CAA6C,CAAC;SAC3E,OAAO,CACN,sBAAsB,EACtB,4DAA4D,CAC7D;SACA,OAAO,CAAC,sBAAsB,EAAE,oCAAoC,CAAC;SAErE,OAAO,CAAC,QAAQ,CAAC;SAEjB,MAAM,CAAC,QAAQ,EAAE,kBAAQ,CAAC,MAAM,CAAC;SACjC,MAAM,CAAC,eAAe,EAAE,kBAAQ,CAAC,aAAa,CAAC;SAC/C,MAAM,CAAC,kBAAkB,EAAE,kBAAQ,CAAC,gBAAgB,CAAC;SAErD,MAAM,EAAE;SAER,UAAU,CAAC,KAAK,EAAE,IAAS,EAAE,EAAE;QAC9B,kDAAkD;QAClD,IAAI,CAAC,OAAO,GAAG;YACb,MAAM,EAAE,MAAM,IAAA,wBAAe,EAAC,IAAI,CAAC;SACpC,CAAC;QAEF,IAAA,sBAAc,EAAC,IAAI,CAAC,CAAC;IACvB,CAAC,EAAE,KAAK,CAAC;SAER,aAAa,CAAC,CAAC,EAAE,wCAAwC,CAAC;SAE1D,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;QACzB,IAAA,aAAK,EAAC,IAAA,4BAAoB,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QAC9C,6CAA6C;QAC7C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC;SAED,IAAI,EAAE;SACN,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC;SAClB,UAAU,EAAE,CAAC;AAClB,CAAC;AA/CD,kBA+CC","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport packageJson from '@metamask/snaps-cli/package.json';\nimport type { SemVer } from 'semver';\nimport semver from 'semver';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\n\nimport builders from './builders';\nimport { getConfigByArgv } from './config';\nimport { error, getYargsErrorMessage, sanitizeInputs } from './utils';\n\n/**\n * Check the Node version. If the Node version is less than the minimum required\n * version, this logs an error and exits the process.\n *\n * @param nodeVersion - The Node version to check.\n */\nexport function checkNodeVersion(\n  nodeVersion: string = process.version.slice(1),\n) {\n  const versionRange = packageJson.engines.node;\n  const minimumVersion = (semver.minVersion(versionRange) as SemVer).format();\n\n  if (!semver.satisfies(nodeVersion, versionRange)) {\n    error(\n      `Node version ${nodeVersion} is not supported. Please use Node ${minimumVersion} or later.`,\n    );\n    // eslint-disable-next-line n/no-process-exit\n    process.exit(1);\n  }\n}\n\n/**\n * The main CLI entry point function. This processes the command line args, and\n * runs the appropriate function.\n *\n * @param argv - The raw command line arguments, i.e., `process.argv`.\n * @param commands - The list of commands to use.\n */\nexport async function cli(argv: string[], commands: any) {\n  checkNodeVersion();\n\n  await yargs(hideBin(argv))\n    .scriptName('mm-snap')\n    .usage('Usage: $0 <command> [options]')\n\n    .example('$0 build', `Build './src/index.js' as './dist/bundle.js'`)\n    .example(\n      '$0 build --config ./snap.config.build.ts',\n      `Build './src/index.js' as './dist/bundle.js' using the config in './snap.config.build.ts'`,\n    )\n    .example('$0 manifest --fix', `Check the snap manifest, and fix any errors`)\n    .example(\n      '$0 watch --port 8000',\n      `The snap input file for changes, and serve it on port 8000`,\n    )\n    .example('$0 serve --port 8000', `Serve the snap bundle on port 8000`)\n\n    .command(commands)\n\n    .option('config', builders.config)\n    .option('verboseErrors', builders.verboseErrors)\n    .option('suppressWarnings', builders.suppressWarnings)\n\n    .strict()\n\n    .middleware(async (args: any) => {\n      // eslint-disable-next-line require-atomic-updates\n      args.context = {\n        config: await getConfigByArgv(args),\n      };\n\n      sanitizeInputs(args);\n    }, false)\n\n    .demandCommand(1, 'You must specify at least one command.')\n\n    .fail((message, failure) => {\n      error(getYargsErrorMessage(message, failure));\n      // eslint-disable-next-line n/no-process-exit\n      process.exit(1);\n    })\n\n    .help()\n    .alias('help', 'h')\n    .parseAsync();\n}\n"]}