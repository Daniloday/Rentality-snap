{"version":3,"file":"config.cjs","sourceRoot":"","sources":["../src/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { literal, union } from '@metamask/snaps-sdk';\nimport {\n  createFromStruct,\n  indent,\n  isFile,\n  SnapsStructError,\n  named,\n} from '@metamask/snaps-utils/node';\nimport {\n  array,\n  boolean,\n  create,\n  defaulted,\n  define,\n  func,\n  number,\n  object,\n  optional,\n  record,\n  string,\n  type,\n  unknown,\n  empty,\n} from '@metamask/superstruct';\nimport type { Infer } from '@metamask/superstruct';\nimport { hasProperty } from '@metamask/utils';\nimport { transform } from '@swc/core';\nimport type { BrowserifyObject } from 'browserify';\nimport { dim } from 'chalk';\nimport { readFile } from 'fs/promises';\nimport Module from 'module';\nimport { basename, dirname, resolve } from 'path';\nimport type { Configuration as WebpackConfiguration } from 'webpack';\n\nimport { TranspilationModes } from './builders';\nimport { ConfigError } from './errors';\nimport { file } from './structs';\nimport type { YargsArgs } from './types/yargs';\nimport { CONFIG_FILE, TS_CONFIG_FILE } from './utils';\n\nconst CONFIG_FILES = [CONFIG_FILE, TS_CONFIG_FILE];\n\n/**\n * The configuration for the Snaps CLI, stored as `snap.config.js` or\n * `snap.config.ts` in the root of the project.\n *\n * @deprecated The Browserify bundler is deprecated and will be removed in a\n * future release. Use the Webpack bundler instead.\n */\nexport type SnapBrowserifyConfig = {\n  /**\n   * The bundler to use to build the snap. For backwards compatibility, if not\n   * specified, Browserify will be used. However, the Browserify bundler is\n   * deprecated and will be removed in a future release, so it's recommended to\n   * use the Webpack bundler instead.\n   */\n  bundler: 'browserify';\n\n  /**\n   * The options for the Snaps CLI. These are merged with the options passed to\n   * the CLI, with the CLI options taking precedence.\n   *\n   * @deprecated The Browserify bundler is deprecated and will be removed in a\n   * future release. Use the Webpack bundler instead.\n   */\n  cliOptions?: {\n    /**\n     * The path to the snap bundle file.\n     *\n     * @default 'dist/bundle.js'\n     */\n    bundle?: string;\n\n    /**\n     * The directory to output the snap to. This is only used if `bundle` is\n     * not specified.\n     *\n     * @default 'dist'\n     */\n    dist?: string;\n\n    /**\n     * Whether to attempt to evaluate the snap in SES. This can catch some errors\n     * that would otherwise only be caught at runtime.\n     *\n     * @default true\n     */\n    eval?: boolean;\n\n    /**\n     * Whether to validate the snap manifest.\n     *\n     * @default true\n     */\n    manifest?: boolean;\n\n    /**\n     * The name of the bundle file. This is only used if `bundle` is not\n     * specified.\n     *\n     * @default 'bundle.js'\n     */\n    outfileName?: string;\n\n    /**\n     * The port to run the server on.\n     *\n     * @default 8081\n     */\n    port?: number;\n\n    /**\n     * The root directory to serve the snap from.\n     *\n     * @default `process.cwd()`\n     */\n    root?: string;\n\n    /**\n     * Whether to generate source maps for the snap bundle.\n     *\n     * @default false\n     */\n    sourceMaps?: boolean;\n\n    /**\n     * The path to the snap entry point.\n     *\n     * @default 'src/index.js'\n     */\n    src?: string;\n\n    /**\n     * Whether to remove comments from the bundle.\n     *\n     * @default true\n     */\n    stripComments?: boolean;\n\n    /**\n     * Whether to suppress warnings.\n     *\n     * @default false\n     */\n    suppressWarnings?: boolean;\n\n    /**\n     * The transpilation mode to use, which determines which files are\n     * transpiled.\n     *\n     * - `'localAndDeps'`: Transpile the snap entry point and all dependencies.\n     * - `'localOnly'`: Transpile only the snap entry point.\n     * - `'none'`: Don't transpile any files.\n     *\n     * @default 'localOnly'\n     */\n    transpilationMode?: 'localAndDeps' | 'localOnly' | 'none';\n\n    /**\n     * The dependencies to transpile when `transpilationMode` is set to\n     * `'localAndDeps'`. If not specified, all dependencies will be transpiled.\n     */\n    depsToTranspile?: string[];\n\n    /**\n     * Whether to show original errors.\n     *\n     * @default true\n     */\n    verboseErrors?: boolean;\n\n    /**\n     * Whether to write the updated manifest to disk.\n     *\n     * @default true\n     */\n    writeManifest?: boolean;\n\n    /**\n     * Whether to serve the snap locally.\n     *\n     * @default true\n     */\n    serve?: boolean;\n  };\n\n  /**\n   * A function that can be used to customize the Browserify instance used to\n   * build the snap.\n   *\n   * @param bundler - The Browserify instance.\n   * @deprecated The Browserify bundler is deprecated and will be removed in a\n   * future release. Use the Webpack bundler instead.\n   */\n  bundlerCustomizer?: (bundler: BrowserifyObject) => void;\n};\n\n/**\n * The configuration for the Snaps CLI, stored as `snap.config.js` or\n * `snap.config.ts` in the root of the project.\n */\nexport type SnapWebpackConfig = {\n  /**\n   * The bundler to use to build the snap. For backwards compatibility, if not\n   * specified, Browserify will be used. However, the Browserify bundler is\n   * deprecated and will be removed in a future release, so it's recommended to\n   * use the Webpack bundler instead.\n   */\n  bundler?: 'webpack';\n\n  /**\n   * The path to the snap entry point. This should be a JavaScript or TypeScript\n   * file.\n   */\n  input: string;\n\n  /**\n   * Whether to generate source maps for the snap. If `true`, source maps will\n   * be generated as separate files. If `'inline'`, source maps will be\n   * inlined in the generated JavaScript bundle.\n   *\n   * @default true\n   */\n  sourceMap?: boolean | 'inline';\n\n  /**\n   * Whether to attempt to evaluate the snap in SES. This can catch some errors\n   * that would otherwise only be caught at runtime.\n   *\n   * @default true\n   */\n  evaluate?: boolean;\n\n  output?: {\n    /**\n     * The path to the directory where the snap will be built. This directory\n     * will be created if it doesn't exist.\n     *\n     * If the path is relative, it will be resolved relative to the current\n     * working directory.\n     *\n     * @default 'dist'\n     */\n    path?: string;\n\n    /**\n     * The name of the JavaScript bundle file.\n     *\n     * @default 'bundle.js'\n     */\n    filename?: string;\n\n    /**\n     * Whether to clean the output directory before building the snap. If\n     * `true`, the output directory will be deleted and recreated. Otherwise,\n     * the output directory will be left as-is.\n     *\n     * @default false\n     */\n    clean?: boolean;\n\n    /**\n     * Whether to minimize the snap bundle. If `true`, the bundle will be\n     * minified. Otherwise, the bundle will be left as-is.\n     *\n     * @default true\n     */\n    minimize?: boolean;\n  };\n\n  manifest?: {\n    /**\n     * The path to the snap manifest file. If the path is relative, it will be\n     * resolved relative to the current working directory.\n     *\n     * @default 'snap.manifest.json'\n     */\n    path?: string;\n\n    /**\n     * Whether to automatically update the manifest. If `true`, the manifest\n     * will be updated with the latest shasum of the snap bundle, and some\n     * common fields will be updated if they are missing or incorrect. If\n     * `false`, the manifest will be left as-is.\n     *\n     * @default true\n     */\n    update?: boolean;\n  };\n\n  server?: {\n    /**\n     * Whether to enable the local server. If `true`, the snap will be served\n     * from a local server, when running the `watch` command. If `false`, the\n     * snap will not be served.\n     *\n     * @default true\n     */\n    enabled?: boolean;\n\n    /**\n     * The root directory to serve the snap from. If the path is relative, it\n     * will be resolved relative to the current working directory.\n     *\n     * @default `process.cwd()`\n     */\n    root?: string;\n\n    /**\n     * The port to run the server on.\n     *\n     * @default 8081\n     */\n    port?: number;\n  };\n\n  /**\n   * The environment variables to set when building the snap. These will be\n   * available in the snap as `process.env`. In addition to these environment\n   * variables, the following environment variables will always be set:\n   *\n   * - `NODE_DEBUG`: `false`\n   * - `NODE_ENV`: `'production'`\n   * - `DEBUG`: `false`\n   *\n   * Any environment variables specified here will override these defaults. You\n   * can also override any variables here by setting them in your shell when\n   * running the CLI.\n   */\n  environment?: Record<string, unknown>;\n\n  /**\n   * Options that control the logging output of the CLI.\n   */\n  stats?: {\n    /**\n     * Whether to enable verbose logging.\n     *\n     * @default false\n     */\n    verbose?: boolean;\n\n    /**\n     * Whether to log warnings about unresolved built-in modules. If `false`,\n     * warnings will not be logged.\n     */\n    builtIns?:\n      | {\n          /**\n           * The built-in modules to ignore when resolving modules. If a module\n           * is ignored, no warning will be logged if it is not resolved.\n           */\n          ignore?: string[];\n        }\n      | false;\n\n    /**\n     * Whether to log warnings about the use of the `Buffer` global. If `false`,\n     * warnings will not be logged. If `true`, the CLI will warn if the `Buffer`\n     * global is used, but not provided by Webpack's `DefinePlugin`.\n     */\n    buffer?: boolean;\n  };\n\n  /**\n   * Whether to provide polyfills for node builtins. If `true`, all the available\n   * polyfills will be provided. If `false` no polyfills will be provided. If a\n   * configuration object is passed only the polyfills set to `true` will be provided.\n   *\n   * @default false\n   * @example\n   * ```ts\n   * polyfills: true\n   *\n   * // or\n   *\n   * polyfills: {\n   *  assert: true,\n   *  buffer: true\n   * }\n   * ```\n   */\n  polyfills?:\n    | boolean\n    | {\n        assert?: boolean;\n        buffer?: boolean;\n        console?: boolean;\n        constants?: boolean;\n        crypto?: boolean;\n        domain?: boolean;\n        events?: boolean;\n        http?: boolean;\n        https?: boolean;\n        os?: boolean;\n        path?: boolean;\n        punycode?: boolean;\n        process?: boolean;\n        querystring?: boolean;\n        stream?: boolean;\n        /* eslint-disable @typescript-eslint/naming-convention */\n        _stream_duplex?: boolean;\n        _stream_passthrough?: boolean;\n        _stream_readable?: boolean;\n        _stream_transform?: boolean;\n        _stream_writable?: boolean;\n        string_decoder?: boolean;\n        /* eslint-enable @typescript-eslint/naming-convention */\n        sys?: boolean;\n        timers?: boolean;\n        tty?: boolean;\n        url?: boolean;\n        util?: boolean;\n        vm?: boolean;\n        zlib?: boolean;\n      };\n\n  /**\n   * Support for TypeScript type-checking feature.\n   *\n   * @example\n   * {\n   *   enabled: true;\n   *   configFile: './path/to/tsconfig.json'\n   * }\n   */\n  typescript?: {\n    /**\n     * Whether to enable TypeScript type-checking feature.\n     *\n     * @default false\n     */\n    enabled?: boolean;\n    /**\n     * Path to tsconfig.json file for the Snap.\n     *\n     * @default 'tsconfig.json'\n     */\n    configFile?: string;\n  };\n\n  /**\n   * Optional features to enable in the CLI.\n   *\n   * @example\n   * {\n   *   features: {\n   *     images: true,\n   *   }\n   * }\n   */\n  features?: {\n    /**\n     * Whether to enable support for images. If `true`, the Webpack\n     * configuration will be modified to support images. If `false`, the\n     * Webpack configuration will not be modified.\n     *\n     * @default true\n     */\n    images?: boolean;\n  };\n\n  /**\n   * A function to customize the Webpack configuration used to build the snap.\n   * This function will be called with the default Webpack configuration, and\n   * should return the modified configuration. If not specified, the default\n   * configuration will be used.\n   *\n   * It's recommended to use the `webpack-merge` package to merge the default\n   * configuration with your customizations. The merge function is exported as\n   * `merge` from the `@metamask/snaps-cli` package.\n   *\n   * @example\n   * ```ts\n   * import type { SnapsConfig } from '@metamask/snaps-cli';\n   * import { merge } from '@metamask/snaps-cli';\n   *\n   * const config: SnapsConfig = {\n   *   bundler: 'webpack',\n   *   entry: 'src/index.ts',\n   *   customizeWebpackConfig: (config) => merge(config, {\n   *     module: {\n   *       rules: [\n   *         {\n   *           test: /\\.wasm$/,\n   *           type: 'assets/resource',\n   *         },\n   *       ],\n   *     },\n   *   }),\n   * };\n   *\n   * export default config;\n   * ```\n   */\n  customizeWebpackConfig?: (\n    config: WebpackConfiguration,\n  ) => WebpackConfiguration;\n\n  /**\n   * Experimental features that can be enabled. These features are not\n   * guaranteed to be stable, and may be removed or changed in a future release.\n   */\n  experimental?: {\n    /**\n     * Whether to enable WebAssembly support. If `true`, the Webpack\n     * configuration will be modified to support WebAssembly. If `false`, the\n     * Webpack configuration will not be modified.\n     *\n     * @default false\n     */\n    wasm?: boolean;\n  };\n};\n\n/**\n * The configuration for the Snaps CLI, stored as `snap.config.js` or\n * `snap.config.ts` in the root of the project.\n */\nexport type SnapConfig = SnapBrowserifyConfig | SnapWebpackConfig;\n\ntype SnapsBrowserifyBundlerCustomizerFunction = (\n  bundler: BrowserifyObject,\n) => void;\n\n// This struct is essentially the same as the `func` struct, but it's defined\n// separately so that we include the function type in the inferred TypeScript\n// type definitions.\nconst SnapsBrowserifyBundlerCustomizerFunctionStruct =\n  define<SnapsBrowserifyBundlerCustomizerFunction>(\n    'function',\n    func().validator,\n  );\n\nexport const SnapsBrowserifyConfigStruct = object({\n  bundler: literal('browserify'),\n  cliOptions: defaulted(\n    object({\n      bundle: optional(file()),\n      dist: defaulted(file(), 'dist'),\n      eval: defaulted(boolean(), true),\n      manifest: defaulted(boolean(), true),\n      port: defaulted(number(), 8081),\n      outfileName: defaulted(string(), 'bundle.js'),\n      root: defaulted(file(), process.cwd()),\n      sourceMaps: defaulted(boolean(), false),\n      src: defaulted(file(), 'src/index.js'),\n      stripComments: defaulted(boolean(), true),\n      suppressWarnings: defaulted(boolean(), false),\n      transpilationMode: defaulted(\n        union([literal('localAndDeps'), literal('localOnly'), literal('none')]),\n        'localOnly',\n      ),\n      depsToTranspile: defaulted(array(string()), []),\n      verboseErrors: defaulted(boolean(), true),\n      writeManifest: defaulted(boolean(), true),\n      serve: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n  bundlerCustomizer: optional(SnapsBrowserifyBundlerCustomizerFunctionStruct),\n});\n\ntype SnapsWebpackCustomizeWebpackConfigFunction = (\n  config: WebpackConfiguration,\n) => WebpackConfiguration;\n\n// This struct is essentially the same as the `func` struct, but it's defined\n// separately so that we include the function type in the inferred TypeScript\n// type definitions.\nconst SnapsWebpackCustomizeWebpackConfigFunctionStruct =\n  define<SnapsWebpackCustomizeWebpackConfigFunction>(\n    'function',\n    func().validator,\n  );\n\nexport const SnapsWebpackConfigStruct = object({\n  bundler: defaulted(literal('webpack'), 'webpack'),\n  input: defaulted(file(), resolve(process.cwd(), 'src/index.js')),\n  sourceMap: defaulted(union([boolean(), literal('inline')]), false),\n  evaluate: defaulted(boolean(), true),\n\n  output: defaulted(\n    object({\n      path: defaulted(file(), resolve(process.cwd(), 'dist')),\n      filename: defaulted(string(), 'bundle.js'),\n      clean: defaulted(boolean(), false),\n      minimize: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n\n  manifest: defaulted(\n    object({\n      path: defaulted(file(), resolve(process.cwd(), 'snap.manifest.json')),\n      update: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n\n  server: defaulted(\n    object({\n      enabled: defaulted(boolean(), true),\n      root: defaulted(file(), process.cwd()),\n      port: defaulted(number(), 8081),\n    }),\n    {},\n  ),\n\n  environment: defaulted(record(string(), unknown()), {}),\n\n  stats: defaulted(\n    object({\n      verbose: defaulted(boolean(), false),\n      builtIns: defaulted(\n        union([\n          object({ ignore: defaulted(array(string()), []) }),\n          literal(false),\n        ]),\n        {},\n      ),\n      buffer: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n\n  polyfills: defaulted(\n    union([\n      boolean(),\n      object({\n        assert: defaulted(boolean(), false),\n        buffer: defaulted(boolean(), false),\n        console: defaulted(boolean(), false),\n        constants: defaulted(boolean(), false),\n        crypto: defaulted(boolean(), false),\n        domain: defaulted(boolean(), false),\n        events: defaulted(boolean(), false),\n        http: defaulted(boolean(), false),\n        https: defaulted(boolean(), false),\n        os: defaulted(boolean(), false),\n        path: defaulted(boolean(), false),\n        punycode: defaulted(boolean(), false),\n        process: defaulted(boolean(), false),\n        querystring: defaulted(boolean(), false),\n        stream: defaulted(boolean(), false),\n        /* eslint-disable @typescript-eslint/naming-convention */\n        _stream_duplex: defaulted(boolean(), false),\n        _stream_passthrough: defaulted(boolean(), false),\n        _stream_readable: defaulted(boolean(), false),\n        _stream_transform: defaulted(boolean(), false),\n        _stream_writable: defaulted(boolean(), false),\n        string_decoder: defaulted(boolean(), false),\n        /* eslint-enable @typescript-eslint/naming-convention */\n        sys: defaulted(boolean(), false),\n        timers: defaulted(boolean(), false),\n        tty: defaulted(boolean(), false),\n        url: defaulted(boolean(), false),\n        util: defaulted(boolean(), false),\n        vm: defaulted(boolean(), false),\n        zlib: defaulted(boolean(), false),\n      }),\n    ]),\n    false,\n  ),\n\n  typescript: defaulted(\n    object({\n      enabled: defaulted(boolean(), false),\n      configFile: defaulted(file(), 'tsconfig.json'),\n    }),\n    {},\n  ),\n\n  features: defaulted(\n    object({\n      images: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n\n  customizeWebpackConfig: optional(\n    SnapsWebpackCustomizeWebpackConfigFunctionStruct,\n  ),\n\n  experimental: defaulted(\n    object({\n      wasm: defaulted(boolean(), false),\n    }),\n    {},\n  ),\n});\n\nexport const SnapsConfigStruct = type({\n  bundler: defaulted(\n    union([literal('browserify'), literal('webpack')]),\n    'webpack',\n  ),\n});\n\nexport const LegacyOptionsStruct = union([\n  named(\n    'object with `transpilationMode` set to `localAndDeps` and `depsToTranspile` set to an array of strings',\n    type({\n      depsToTranspile: array(string()),\n      transpilationMode: literal(TranspilationModes.LocalAndDeps),\n      writeManifest: boolean(),\n      bundlerCustomizer: optional(\n        SnapsBrowserifyBundlerCustomizerFunctionStruct,\n      ),\n    }),\n  ),\n  named(\n    'object without `depsToTranspile`',\n    type({\n      depsToTranspile: named('empty array', empty(array())),\n      transpilationMode: union([\n        literal(TranspilationModes.LocalOnly),\n        literal(TranspilationModes.None),\n      ]),\n      writeManifest: boolean(),\n      bundlerCustomizer: optional(\n        SnapsBrowserifyBundlerCustomizerFunctionStruct,\n      ),\n    }),\n  ),\n]);\n\nexport type LegacyOptions = Infer<typeof LegacyOptionsStruct>;\n\nexport type ProcessedBrowserifyConfig = Infer<\n  typeof SnapsBrowserifyConfigStruct\n>;\n\nexport type ProcessedWebpackConfig = Infer<typeof SnapsWebpackConfigStruct> & {\n  /**\n   * The legacy Browserify config, if the bundler is Browserify. This is used\n   * to support the legacy config format.\n   */\n  legacy?: LegacyOptions;\n};\n\nexport type ProcessedConfig = ProcessedWebpackConfig;\n\n/**\n * Get a validated snap config. This validates the config and adds default\n * values for any missing properties.\n *\n * @param config - The config to validate.\n * @param argv - The CLI arguments.\n * @returns The validated config.\n */\nexport function getConfig(config: unknown, argv: YargsArgs): ProcessedConfig {\n  const prefix = 'The snap config file is invalid';\n  const suffix = dim(\n    'Refer to the documentation for more information: https://docs.metamask.io/snaps/reference/cli/options/',\n  );\n\n  const { bundler } = createFromStruct(\n    config,\n    SnapsConfigStruct,\n    prefix,\n    suffix,\n  );\n\n  if (bundler === 'browserify') {\n    const legacyConfig = createFromStruct(\n      config,\n      SnapsBrowserifyConfigStruct,\n      prefix,\n      suffix,\n    );\n\n    return getWebpackConfig(mergeLegacyOptions(argv, legacyConfig));\n  }\n\n  return createFromStruct(config, SnapsWebpackConfigStruct, prefix, suffix);\n}\n\n/**\n * Load a snap config from a file. This supports both JavaScript and TypeScript\n * config files, in the CommonJS module format and the ES module format.\n *\n * This assumes that the config file exports a default object, either through\n * `module.exports` or `export default`.\n *\n * @param path - The full path to the config file.\n * @param argv - The CLI arguments.\n * @returns The validated config.\n * @throws If the config file is invalid, or if the config file does not have a\n * default export.\n */\nexport async function loadConfig(path: string, argv: YargsArgs) {\n  try {\n    const contents = await readFile(path, 'utf8');\n    const source = await transform(contents, {\n      swcrc: false,\n      jsc: {\n        parser: {\n          syntax: 'typescript',\n        },\n      },\n      module: {\n        type: 'commonjs',\n      },\n    });\n\n    const config = new Module(path);\n\n    // @ts-expect-error - This function is not typed.\n    config.paths = Module._nodeModulePaths(dirname(path));\n\n    // @ts-expect-error - This function is not typed.\n    config._compile(source.code, path);\n\n    if (!hasProperty(config.exports, 'default')) {\n      return getConfig(config.exports, argv);\n    }\n\n    return getConfig(config.exports.default, argv);\n  } catch (error) {\n    if (error instanceof SnapsStructError) {\n      throw new ConfigError(error.message);\n    }\n\n    throw new ConfigError(\n      `Unable to load snap config file at \"${path}\".\\n\\n${indent(\n        error.message,\n      )}`,\n    );\n  }\n}\n\n/**\n * Resolve a snap config. This function will look for a `snap.config.js` or\n * `snap.config.ts` file in the current or specified directory.\n *\n * @param path - The path to resolve the snap config from. Defaults to the\n * current working directory.\n * @param argv - The CLI arguments.\n * @returns The resolved and validated snap config.\n * @throws If a snap config could not be found.\n */\nexport async function resolveConfig(path: string, argv: YargsArgs) {\n  for (const configFile of CONFIG_FILES) {\n    const filePath = resolve(path, configFile);\n    if (await isFile(filePath)) {\n      return await loadConfig(filePath, argv);\n    }\n  }\n\n  throw new ConfigError(\n    `Could not find a \"snap.config.js\" or \"snap.config.ts\" file in the current or specified directory (\"${path}\").`,\n  );\n}\n\n/**\n * Get a snap config from the CLI arguments. This will either load the config\n * from the specified config file, or resolve the config from the current\n * working directory.\n *\n * @param argv - The CLI arguments.\n * @param cwd - The current working directory. Defaults to `process.cwd()`.\n * @returns The resolved and validated snap config.\n */\nexport async function getConfigByArgv(\n  argv: YargsArgs,\n  cwd: string = process.cwd(),\n) {\n  if (argv.config) {\n    if (!(await isFile(argv.config))) {\n      throw new ConfigError(\n        `Could not find a config file at \"${argv.config}\". Make sure that the path is correct.`,\n      );\n    }\n\n    return await loadConfig(argv.config, argv);\n  }\n\n  return await resolveConfig(cwd, argv);\n}\n\n/**\n * Merge legacy CLI options into the config. This is used to support the legacy\n * config format, where options can be specified both in the config file and\n * through CLI flags.\n *\n * @param argv - The CLI arguments.\n * @param config - The config to merge the CLI options into.\n * @returns The config with the CLI options merged in.\n * @deprecated This function is only used to support the legacy config format.\n */\nexport function mergeLegacyOptions(\n  argv: YargsArgs,\n  config: ProcessedBrowserifyConfig,\n) {\n  const cliOptions = Object.keys(config.cliOptions).reduce<\n    ProcessedBrowserifyConfig['cliOptions']\n  >((accumulator, key) => {\n    if (argv[key] !== undefined) {\n      return {\n        ...accumulator,\n        [key]: argv[key],\n      };\n    }\n\n    return accumulator;\n  }, config.cliOptions);\n\n  return {\n    ...config,\n    cliOptions,\n  };\n}\n\n/**\n * Get a Webpack config from a legacy browserify config. This is used to\n * support the legacy config format, and convert it to the new format.\n *\n * @param legacyConfig - The legacy browserify config.\n * @returns The Webpack config.\n */\nexport function getWebpackConfig(\n  legacyConfig: ProcessedBrowserifyConfig,\n): ProcessedWebpackConfig {\n  const defaultConfig = create(\n    { bundler: 'webpack' },\n    SnapsWebpackConfigStruct,\n  );\n\n  // The legacy config has two options for specifying the output path and\n  // filename: `bundle`, and `dist` + `outfileName`. If `bundle` is specified,\n  // we use that as the output path and filename. Otherwise, we use `dist` and\n  // `outfileName`.\n  const path = legacyConfig.cliOptions.bundle\n    ? dirname(legacyConfig.cliOptions.bundle)\n    : legacyConfig.cliOptions.dist;\n\n  const filename = legacyConfig.cliOptions.bundle\n    ? basename(legacyConfig.cliOptions.bundle)\n    : legacyConfig.cliOptions.outfileName;\n\n  return {\n    ...defaultConfig,\n    input: legacyConfig.cliOptions.src,\n    evaluate: legacyConfig.cliOptions.eval,\n    sourceMap: legacyConfig.cliOptions.sourceMaps,\n    output: {\n      path,\n      filename,\n\n      // The legacy config has an option to remove comments from the bundle, but\n      // the terser plugin does this by default, so we only enable the terser if\n      // the legacy config has `stripComments` set to `true`. This is not a\n      // perfect solution, but it's the best we can do without breaking the\n      // legacy config.\n      minimize: legacyConfig.cliOptions.stripComments,\n\n      // The legacy config does not have a `clean` option, so we default to\n      // `false` here.\n      clean: false,\n    },\n    manifest: {\n      // The legacy config does not have a `manifest` option, so we default to\n      // `process.cwd()/snap.manifest.json`.\n      path: resolve(process.cwd(), 'snap.manifest.json'),\n      update: legacyConfig.cliOptions.writeManifest,\n    },\n    server: {\n      enabled: legacyConfig.cliOptions.serve,\n      port: legacyConfig.cliOptions.port,\n      root: legacyConfig.cliOptions.root,\n    },\n    stats: {\n      verbose: false,\n\n      // These plugins are designed to be used with the modern config format, so\n      // we disable them for the legacy config format.\n      builtIns: false,\n      buffer: false,\n    },\n    legacy: createFromStruct(\n      {\n        ...legacyConfig.cliOptions,\n        bundlerCustomizer: legacyConfig.bundlerCustomizer,\n      },\n      LegacyOptionsStruct,\n      'Invalid Browserify CLI options',\n    ),\n  };\n}\n"]}