{"version":3,"file":"legacy.cjs","sourceRoot":"","sources":["../../src/utils/legacy.ts"],"names":[],"mappings":";;;AAAA,8CAAiD;AAGjD;;;;;;;;;GASG;AACH,SAAgB,mBAAmB,CAAC,MAAqB;IACvD,MAAM,EAAE,eAAe,EAAE,iBAAiB,EAAE,GAAG,MAAM,CAAC;IACtD,IAAI,iBAAiB,KAAK,6BAAkB,CAAC,YAAY,EAAE,CAAC;QAC1D,MAAM,KAAK,GAAG,mBAAmB,CAAC,eAAe,CAAC,CAAC;QACnD,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACnB,OAAO,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAVD,kDAUC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,YAAsB;IACxD,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;QACxE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,KAAK,GAAa,uBAAuB,CAAC,YAAY,CAAC,CAAC;IAC9D,OAAO,MAAM,CAAC,oBAAoB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7D,CAAC;AAPD,kDAOC;AAED;;;;;;GAMG;AACH,SAAgB,uBAAuB,CAAC,YAAsB;IAC5D,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;QACrC,OAAO,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,0DAIC","sourcesContent":["import { TranspilationModes } from '../builders';\nimport type { LegacyOptions } from '../config';\n\n/**\n * Get the dependencies to transpile, as well as the regular input file.\n *\n * If `transpilationMode` is not set to `localAndDeps`, this will return an\n * empty array.\n *\n * @param config - The config object.\n * @returns An array with regular expressions of dependencies that should be\n * transpiled.\n */\nexport function processDependencies(config: LegacyOptions) {\n  const { depsToTranspile, transpilationMode } = config;\n  if (transpilationMode === TranspilationModes.LocalAndDeps) {\n    const regex = getDependencyRegExp(depsToTranspile);\n    if (regex !== null) {\n      return [regex];\n    }\n  }\n\n  return [];\n}\n\n/**\n * Processes a string of space delimited dependencies into one RegExp string.\n *\n * @param dependencies - An array of dependencies to add to the RegExp.\n * @returns A RegExp object.\n */\nexport function getDependencyRegExp(dependencies: string[]): RegExp | null {\n  if (!dependencies || dependencies.includes('.') || !dependencies.length) {\n    return null;\n  }\n\n  const paths: string[] = sanitizeDependencyPaths(dependencies);\n  return RegExp(`/node_modules/(?!${paths.join('|')})`, 'u');\n}\n\n/**\n * Helper function to remove any leading and trailing slashes from dependency\n * list.\n *\n * @param dependencies - An array of dependencies to sanitize.\n * @returns An array of sanitized paths.\n */\nexport function sanitizeDependencyPaths(dependencies: string[]): string[] {\n  return dependencies.map((dependency) => {\n    return dependency.replace(/^[/\\\\]+/u, '').replace(/[/\\\\]+$/u, '');\n  });\n}\n"]}