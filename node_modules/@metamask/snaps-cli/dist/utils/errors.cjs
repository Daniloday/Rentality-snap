"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorMessage = exports.getYargsErrorMessage = void 0;
const utils_1 = require("@metamask/utils");
const errors_1 = require("../errors.cjs");
/**
 * Get the error message from an error in a Yargs `fail` handler. If the error
 * is not `undefined`, {@link getErrorMessage} is used to get the error message.
 * Otherwise, the given message is returned.
 *
 * @param message - The error message.
 * @param error - The error object. This may be `undefined`.
 * @returns The error message.
 */
function getYargsErrorMessage(message, error) {
    if (error) {
        if (error instanceof errors_1.CLIError) {
            return error.message;
        }
        return getErrorMessage(error);
    }
    return message;
}
exports.getYargsErrorMessage = getYargsErrorMessage;
/**
 * Get the error message from an error.
 *
 * - If the error is an object with a `stack` property, the `stack` property is
 * returned.
 * - If the error is an object with a `message` property, the `message`
 * property is returned.
 * - Otherwise, the error is converted to a string and returned.
 *
 * @param error - The error to get the message from.
 * @returns The error message.
 */
function getErrorMessage(error) {
    if ((0, utils_1.isObject)(error)) {
        if ((0, utils_1.hasProperty)(error, 'stack') && typeof error.stack === 'string') {
            return error.stack;
        }
        if ((0, utils_1.hasProperty)(error, 'message') && typeof error.message === 'string') {
            return error.message;
        }
    }
    return String(error);
}
exports.getErrorMessage = getErrorMessage;
//# sourceMappingURL=errors.cjs.map