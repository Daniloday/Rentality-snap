{"version":3,"file":"utils.mjs","sourceRoot":"","sources":["../../src/webpack/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { bytesToBase64 } from '@metamask/utils';\nimport { dim } from 'chalk';\nimport { promises as fs } from 'fs';\nimport { builtinModules } from 'module';\nimport type { Ora } from 'ora';\nimport { dirname, resolve } from 'path';\nimport stripAnsi from 'strip-ansi';\nimport type { Configuration } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../config';\nimport { browserify, getFunctionLoader } from './loaders';\n\nexport const BROWSERSLIST_FILE = resolve(\n  dirname(\n    // eslint-disable-next-line n/no-extraneous-require\n    require.resolve('@metamask/snaps-cli/package.json'),\n  ),\n  '.browserslistrc',\n);\n\nexport const WEBPACK_FALLBACKS = {\n  assert: require.resolve('assert/'),\n  buffer: require.resolve('buffer/'),\n  console: require.resolve('console-browserify'),\n  constants: require.resolve('constants-browserify'),\n  crypto: require.resolve('crypto-browserify'),\n  domain: require.resolve('domain-browser'),\n  events: require.resolve('events/'),\n  http: require.resolve('stream-http'),\n  https: require.resolve('https-browserify'),\n  os: require.resolve('os-browserify/browser'),\n  path: require.resolve('path-browserify'),\n  punycode: require.resolve('punycode/'),\n  process: require.resolve('process/browser'),\n  querystring: require.resolve('querystring-es3'),\n  stream: require.resolve('stream-browserify'),\n  /* eslint-disable @typescript-eslint/naming-convention  */\n  _stream_duplex: require.resolve('readable-stream/lib/_stream_duplex'),\n  _stream_passthrough: require.resolve(\n    'readable-stream/lib/_stream_passthrough',\n  ),\n  _stream_readable: require.resolve('readable-stream/lib/_stream_readable'),\n  _stream_transform: require.resolve('readable-stream/lib/_stream_transform'),\n  _stream_writable: require.resolve('readable-stream/lib/_stream_writable'),\n  string_decoder: require.resolve('string_decoder/'),\n  /* eslint-enable @typescript-eslint/naming-convention  */\n  sys: require.resolve('util/'),\n  timers: require.resolve('timers-browserify'),\n  tty: require.resolve('tty-browserify'),\n  url: require.resolve('url/'),\n  util: require.resolve('util/'),\n  vm: require.resolve('vm-browserify'),\n  zlib: require.resolve('browserify-zlib'),\n};\n\n/**\n * Get the default loader for JavaScript and TypeScript files, based on the\n * config object.\n *\n * - If the `legacy` option is set, we use the custom `browserify` loader. This\n * uses the legacy Browserify config to transpile the code.\n * - Otherwise, we use the `swc-loader`. This is a Webpack loader that uses the\n * `SWC` compiler, which is a much faster alternative to Babel and TypeScript's\n * own compiler.\n *\n * @param config - The processed snap Webpack config.\n * @param config.legacy - The legacy config object, if any.\n * @param config.sourceMap - Whether to generate source maps.\n * @see https://swc.rs/docs/usage/swc-loader\n * @returns The default loader.\n */\nexport async function getDefaultLoader({\n  legacy,\n  sourceMap,\n}: ProcessedWebpackConfig) {\n  if (legacy) {\n    /**\n     * If the snap uses the legacy config, we use the custom `browserify`\n     * loader. This uses the legacy Browserify config to transpile the code.\n     * This is necessary for backwards compatibility with the\n     * `bundlerCustomizer` function.\n     */\n    return getFunctionLoader(browserify, legacy);\n  }\n\n  const targets = await getBrowserslistTargets();\n  return {\n    /**\n     * We use the `swc-loader` to transpile TypeScript and JavaScript files.\n     * This is a Webpack loader that uses the `SWC` compiler, which is a much\n     * faster alternative to Babel and TypeScript's own compiler.\n     */\n    loader: require.resolve('swc-loader'),\n\n    /**\n     * The options for the `swc-loader`. These can be overridden in the\n     * `.swcrc` file.\n     *\n     * @see https://swc.rs/docs/configuration/swcrc\n     */\n    options: {\n      sync: false,\n\n      /**\n       * This tells SWC to generate source maps. We set it to the\n       * `sourceMap` value from the config object.\n       *\n       * This must be enabled if source maps are enabled in the config.\n       */\n      sourceMaps: Boolean(getDevTool(sourceMap)),\n\n      jsc: {\n        parser: {\n          /**\n           * This tells the parser to parse TypeScript files. If you\n           * don't need to support TypeScript, you can set this to\n           * `ecmascript` instead, but there's no harm in leaving it\n           * as `typescript`.\n           *\n           * @see https://swc.rs/docs/configuration/compilation#jscparser\n           */\n          syntax: 'typescript',\n\n          /**\n           * This tells the parser to transpile JSX.\n           *\n           * @see https://swc.rs/docs/configuration/compilation#jscparser\n           * @see https://swc.rs/docs/configuration/compilation#jscparserjsx\n           */\n          tsx: true,\n        },\n\n        transform: {\n          react: {\n            /**\n             * This tells SWC to use the JSX runtime, instead of the\n             * `createElement` function.\n             *\n             * @see https://swc.rs/docs/configuration/compilation#jsctransformreact\n             */\n            runtime: 'automatic',\n\n            /**\n             * This tells SWC to import the JSX runtime from the\n             * `@metamask/snaps-sdk` package, instead of the default React\n             * package.\n             *\n             * @see https://swc.rs/docs/configuration/compilation#jsctransformreact\n             */\n            importSource: '@metamask/snaps-sdk',\n\n            /**\n             * This tells SWC to use `Object.assign` and `Object.create` for\n             * JSX spread attributes, instead of the default behavior.\n             *\n             * @see https://swc.rs/docs/configuration/compilation#jsctransformreact\n             */\n            useBuiltins: true,\n          },\n        },\n      },\n\n      /**\n       * The module configuration. This tells SWC how to output the\n       * transpiled code.\n       *\n       * @see https://swc.rs/docs/configuration/modules\n       */\n      module: {\n        /**\n         * This tells SWC to output ES6 modules. This will allow Webpack to\n         * optimize the output code better. Snaps don't support ES6 however, so\n         * the output code will be transpiled to CommonJS by Webpack later in\n         * the build process.\n         *\n         * @see https://swc.rs/docs/configuration/modules#es6\n         */\n        type: 'es6',\n      },\n\n      env: {\n        targets: targets.join(', '),\n      },\n    },\n  };\n}\n\n/**\n * Get the Webpack devtool configuration based on the given snap config.\n *\n * - If `sourceMap` is `inline`, return `inline-source-map`.\n * - If `sourceMap` is `true`, return `source-map`.\n * - Otherwise, return `false`.\n *\n * @param sourceMap - The `sourceMap` value from the snap config.\n * @returns The Webpack devtool configuration.\n */\nexport function getDevTool(\n  sourceMap: ProcessedWebpackConfig['sourceMap'],\n): Configuration['devtool'] {\n  if (sourceMap === 'inline') {\n    return 'inline-source-map';\n  }\n\n  if (sourceMap === true) {\n    return 'source-map';\n  }\n\n  return false;\n}\n\n/**\n * Get a function that can be used as handler function for Webpack's\n * `ProgressPlugin`.\n *\n * @param spinner - The spinner to update.\n * @param spinnerText - The initial spinner text. This will be prepended to the\n * percentage.\n * @returns A function that can be used as handler function for Webpack's\n * `ProgressPlugin`.\n */\n// Note: This is extracted for testing purposes.\nexport function getProgressHandler(spinner?: Ora, spinnerText?: string) {\n  return (percentage: number) => {\n    if (spinner && spinnerText) {\n      spinner.text = `${spinnerText} ${dim(\n        `(${Math.round(percentage * 100)}%)`,\n      )}`;\n    }\n  };\n}\n\n/**\n * Get the targets from the `.browserslistrc` file.\n *\n * @returns The browser targets as an array of strings.\n */\nexport async function getBrowserslistTargets() {\n  const contents = await fs.readFile(BROWSERSLIST_FILE, 'utf8');\n  return contents\n    .split('\\n')\n    .map((line) => line.trim())\n    .filter((line) => line && !line.startsWith('#'));\n}\n\n/**\n * Get a singular or plural string based on the given count. This is useful for\n * generating messages like \"1 error\" or \"2 errors\". By default, the plural\n * string is the singular string with an \"s\" appended to it.\n *\n * This assumes that the text is in English, and likely won't work for some\n * other languages.\n *\n * @param count - The count.\n * @param singular - The singular string.\n * @param plural - The plural string.\n * @returns The singular or plural string.\n * @example\n * ```typescript\n * pluralize(1, 'error'); // => 'error'\n * pluralize(2, 'error'); // => 'errors'\n * pluralize(1, 'error', 'problem'); // => 'error'\n * pluralize(2, 'error', 'problems'); // => 'problems'\n * ```\n */\nexport function pluralize(\n  count: number,\n  singular: string,\n  plural = `${singular}s`,\n) {\n  return count === 1 ? singular : plural;\n}\n\n/**\n * Get an object that can be used as fallback config for Webpack's\n * `fallback` config.\n *\n * @param polyfills - The polyfill object from the snap config.\n * @returns The webpack fallback config.\n */\nexport function getFallbacks(polyfills: ProcessedWebpackConfig['polyfills']): {\n  [index: string]: string | false;\n} {\n  if (polyfills === true) {\n    return Object.fromEntries(\n      builtinModules.map((name) => [\n        name,\n        WEBPACK_FALLBACKS[name as keyof typeof WEBPACK_FALLBACKS] ?? false,\n      ]),\n    );\n  }\n\n  if (polyfills === false) {\n    return Object.fromEntries(builtinModules.map((name) => [name, false]));\n  }\n\n  return Object.fromEntries(\n    builtinModules.map((name) => [\n      name,\n      polyfills[name as keyof ProcessedWebpackConfig['polyfills']]\n        ? WEBPACK_FALLBACKS[name as keyof typeof WEBPACK_FALLBACKS]\n        : false,\n    ]),\n  );\n}\n\n/**\n * Get an object that can be used as environment variables for Webpack's\n * `DefinePlugin`.\n *\n * @param environment - The environment object from the Snap config.\n * @param defaults - The default environment variables.\n * @returns The Webpack environment variables.\n */\nexport function getEnvironmentVariables(\n  environment: Record<string, unknown>,\n  defaults = {\n    NODE_DEBUG: 'false',\n    NODE_ENV: 'production',\n    DEBUG: 'false',\n  },\n) {\n  return Object.fromEntries(\n    Object.entries({\n      ...defaults,\n      ...environment,\n    }).map(([key, value]) => [`process.env.${key}`, JSON.stringify(value)]),\n  );\n}\n\n/**\n * Format the given line to fit within the terminal width.\n *\n * @param line - The line to format.\n * @param indent - The indentation to use.\n * @param initialIndent - The initial indentation to use, i.e., the indentation\n * for the first line.\n * @returns The formatted line.\n */\nfunction formatLine(line: string, indent: number, initialIndent: number) {\n  const terminalWidth = process.stdout.columns;\n  if (!terminalWidth) {\n    return `${' '.repeat(initialIndent)}${line}`;\n  }\n\n  return line.split(' ').reduce(\n    ({ formattedText, currentLineLength }, word, index) => {\n      // `chalk` adds ANSI escape codes to the text, which are not visible\n      // characters. We need to strip them to get the visible length of the\n      // text.\n      const visibleWord = stripAnsi(word);\n\n      // Determine if a space should be added before the word.\n      const spaceBeforeWord = index > 0 ? ' ' : '';\n      const wordLengthWithSpace = visibleWord.length + spaceBeforeWord.length;\n\n      // If the word would exceed the terminal width, start a new line.\n      if (currentLineLength + wordLengthWithSpace > terminalWidth) {\n        return {\n          formattedText: `${formattedText}\\n${' '.repeat(indent)}${word}`,\n          currentLineLength: indent + visibleWord.length,\n        };\n      }\n\n      // Otherwise, add the word to the current line.\n      return {\n        formattedText: formattedText + spaceBeforeWord + word,\n        currentLineLength: currentLineLength + wordLengthWithSpace,\n      };\n    },\n    {\n      formattedText: ' '.repeat(initialIndent),\n      currentLineLength: initialIndent,\n    },\n  ).formattedText;\n}\n\n/**\n * Format the given text to fit within the terminal width.\n *\n * @param text - The text to format.\n * @param indent - The indentation to use.\n * @param initialIndent - The initial indentation to use, i.e., the indentation\n * for the first line.\n * @returns The formatted text.\n */\nexport function formatText(\n  text: string,\n  indent: number,\n  initialIndent = indent,\n) {\n  const lines = text.split('\\n');\n\n  // Apply formatting to each line separately and then join them.\n  return lines\n    .map((line, index) => {\n      const lineIndent = index === 0 ? initialIndent : indent;\n      return formatLine(line, indent, lineIndent);\n    })\n    .join('\\n');\n}\n\n/**\n * Get an SVG from the given bytes and mime type.\n *\n * @param mimeType - The mime type of the image.\n * @param bytes - The image bytes.\n * @returns The SVG.\n */\nexport function getImageSVG(mimeType: string, bytes: Uint8Array) {\n  const dataUrl = `data:${mimeType};base64,${bytesToBase64(bytes)}`;\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\"><image href=\"${dataUrl}\" /></svg>`;\n}\n"]}