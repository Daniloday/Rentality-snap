"use strict";
/* eslint-disable no-restricted-globals */
Object.defineProperty(exports, "__esModule", { value: true });
exports.raw = exports.getExports = exports.getModuleImports = exports.getImports = void 0;
const utils_1 = require("@metamask/utils");
const path_1 = require("path");
/**
 * Get the imports code for the WASM module. This code imports each of the
 * imports from the WASM module.
 *
 * @param importMap - The import map for the WASM module.
 * @returns The imports code for the WASM module.
 */
function getImports(importMap) {
    return Object.entries(importMap)
        .map(([moduleName, exportNames]) => `import { ${exportNames.join(', ')} } from ${JSON.stringify(moduleName)};`)
        .join('\n');
}
exports.getImports = getImports;
/**
 * Get the imports code to use in `WebAssembly.Instance`. This code adds each of
 * the imports to the `imports` object.
 *
 * @param importMap - The import map for the WASM module.
 * @returns The imports code for the WASM module.
 */
function getModuleImports(importMap) {
    return Object.entries(importMap)
        .map(([moduleName, exportNames]) => `${JSON.stringify(moduleName)}: { ${exportNames.join(', ')} },`)
        .join('\n');
}
exports.getModuleImports = getModuleImports;
/**
 * Get the exports code for the WASM module. This code exports each of the
 * exports from the WASM module as a variable. This function assumes that the
 * exports are available in a variable named `exports`.
 *
 * @param descriptors - The export descriptors from the WASM module.
 * @returns The exports code for the WASM module.
 */
function getExports(descriptors) {
    return descriptors
        .map((descriptor) => {
        if (descriptor.name === 'default') {
            return `export default exports[${JSON.stringify(descriptor.name)}];`;
        }
        return `export const ${descriptor.name} = exports[${JSON.stringify(descriptor.name)}];`;
    })
        .join('\n');
}
exports.getExports = getExports;
/**
 * A Webpack loader that synchronously loads the WASM module. This makes it
 * possible to import the WASM module directly.
 *
 * @param source - The WASM module as `Uint8Array`.
 * @returns The WASM module as a JavaScript string.
 * @example
 * ```ts
 * import * as wasm from './program.wasm';
 *
 * // Do something with the WASM module...
 * ```
 */
// Note: This function needs to be defined like this, so that Webpack can bind
// `this` to the loader context, and TypeScript can infer the type of `this`.
const loader = async function loader(source) {
    (0, utils_1.assert)(source instanceof Uint8Array, 'Expected source to be a Uint8Array.');
    const wasmModule = await WebAssembly.compile(source);
    // eslint-disable-next-line @typescript-eslint/no-shadow
    const exports = WebAssembly.Module.exports(wasmModule);
    const imports = WebAssembly.Module.imports(wasmModule).reduce((target, descriptor) => {
        var _a;
        target[_a = descriptor.module] ?? (target[_a] = []);
        target[descriptor.module].push(descriptor.name);
        return target;
    }, {});
    // Add the WASM import as a dependency so that Webpack will watch it for
    // changes.
    const path = (0, path_1.dirname)(this.resourcePath);
    for (const name of Object.keys(imports)) {
        this.addDependency((0, path_1.resolve)(path, name));
    }
    return `
    ${getImports(imports)}

    const b64 = ${JSON.stringify((0, utils_1.bytesToBase64)(source))};

    function decode(encoded) {
      const str = atob(encoded);
      const bytes = new Uint8Array(str.length);
      for (let i = 0; i < str.length; i++) {
        bytes[i] = str.charCodeAt(i);
      }
      return bytes;
    }

    const bytes = decode(b64);
    const module = new WebAssembly.Module(bytes);
    const instance = new WebAssembly.Instance(module, {
      ${getModuleImports(imports)}
    });

    const exports = instance.exports;
    ${getExports(exports)}
  `;
};
exports.default = loader;
// By setting `raw` to `true`, we are telling Webpack to provide the source as a
// `Uint8Array` instead of converting it to a string. This allows us to avoid
// having to convert the source back to a `Uint8Array` in the loader.
exports.raw = true;
//# sourceMappingURL=wasm.cjs.map