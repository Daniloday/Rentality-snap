{"version":3,"file":"wasm.cjs","sourceRoot":"","sources":["../../../src/webpack/loaders/wasm.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals */\n\nimport { assert, bytesToBase64 } from '@metamask/utils';\nimport { dirname, resolve } from 'path';\nimport type { LoaderDefinitionFunction } from 'webpack';\n\n/**\n * Get the imports code for the WASM module. This code imports each of the\n * imports from the WASM module.\n *\n * @param importMap - The import map for the WASM module.\n * @returns The imports code for the WASM module.\n */\nexport function getImports(importMap: Record<string, string[]>) {\n  return Object.entries(importMap)\n    .map(\n      ([moduleName, exportNames]) =>\n        `import { ${exportNames.join(', ')} } from ${JSON.stringify(\n          moduleName,\n        )};`,\n    )\n    .join('\\n');\n}\n\n/**\n * Get the imports code to use in `WebAssembly.Instance`. This code adds each of\n * the imports to the `imports` object.\n *\n * @param importMap - The import map for the WASM module.\n * @returns The imports code for the WASM module.\n */\nexport function getModuleImports(importMap: Record<string, string[]>) {\n  return Object.entries(importMap)\n    .map(\n      ([moduleName, exportNames]) =>\n        `${JSON.stringify(moduleName)}: { ${exportNames.join(', ')} },`,\n    )\n    .join('\\n');\n}\n\n/**\n * Get the exports code for the WASM module. This code exports each of the\n * exports from the WASM module as a variable. This function assumes that the\n * exports are available in a variable named `exports`.\n *\n * @param descriptors - The export descriptors from the WASM module.\n * @returns The exports code for the WASM module.\n */\nexport function getExports(descriptors: WebAssembly.ModuleExportDescriptor[]) {\n  return descriptors\n    .map((descriptor) => {\n      if (descriptor.name === 'default') {\n        return `export default exports[${JSON.stringify(descriptor.name)}];`;\n      }\n\n      return `export const ${descriptor.name} = exports[${JSON.stringify(\n        descriptor.name,\n      )}];`;\n    })\n    .join('\\n');\n}\n\n/**\n * A Webpack loader that synchronously loads the WASM module. This makes it\n * possible to import the WASM module directly.\n *\n * @param source - The WASM module as `Uint8Array`.\n * @returns The WASM module as a JavaScript string.\n * @example\n * ```ts\n * import * as wasm from './program.wasm';\n *\n * // Do something with the WASM module...\n * ```\n */\n// Note: This function needs to be defined like this, so that Webpack can bind\n// `this` to the loader context, and TypeScript can infer the type of `this`.\nconst loader: LoaderDefinitionFunction = async function loader(\n  source: unknown,\n) {\n  assert(source instanceof Uint8Array, 'Expected source to be a Uint8Array.');\n\n  const wasmModule = await WebAssembly.compile(source);\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const exports = WebAssembly.Module.exports(wasmModule);\n  const imports = WebAssembly.Module.imports(wasmModule).reduce<\n    Record<string, string[]>\n  >((target, descriptor) => {\n    target[descriptor.module] ??= [];\n    target[descriptor.module].push(descriptor.name);\n\n    return target;\n  }, {});\n\n  // Add the WASM import as a dependency so that Webpack will watch it for\n  // changes.\n  const path = dirname(this.resourcePath);\n  for (const name of Object.keys(imports)) {\n    this.addDependency(resolve(path, name));\n  }\n\n  return `\n    ${getImports(imports)}\n\n    const b64 = ${JSON.stringify(bytesToBase64(source))};\n\n    function decode(encoded) {\n      const str = atob(encoded);\n      const bytes = new Uint8Array(str.length);\n      for (let i = 0; i < str.length; i++) {\n        bytes[i] = str.charCodeAt(i);\n      }\n      return bytes;\n    }\n\n    const bytes = decode(b64);\n    const module = new WebAssembly.Module(bytes);\n    const instance = new WebAssembly.Instance(module, {\n      ${getModuleImports(imports)}\n    });\n\n    const exports = instance.exports;\n    ${getExports(exports)}\n  `;\n};\n\nexport default loader;\n\n// By setting `raw` to `true`, we are telling Webpack to provide the source as a\n// `Uint8Array` instead of converting it to a string. This allows us to avoid\n// having to convert the source back to a `Uint8Array` in the loader.\nexport const raw = true;\n"]}