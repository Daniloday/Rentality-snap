{"version":3,"file":"browserify.mjs","sourceRoot":"","sources":["../../../src/webpack/loaders/browserify.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,WAAU,mBAAmB;;AACpC,OAAO,EAAE,QAAQ,EAAE,wBAAwB;AAG3C,OAAO,EAAE,kBAAkB,EAAE,2BAAuB;AAEpD,OAAO,EAAE,mBAAmB,EAAE,8BAAoB;AAClD,OAAO,EAAE,sBAAsB,EAAE,qBAAiB;AAElD;;;;;;;;;;;;GAYG;AACH,MAAM,MAAM,GAA4C,KAAK,WAC3D,OAAO,EACP,SAAS;IAET,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAEjC,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,CAAC;IAErC,MAAM,OAAO,GAAG,UAAU,CAAC;QACzB,UAAU,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;QAC1C,KAAK,EAAE,OAAO,CAAC,SAAS,CAAC;QACzB,UAAU,EAAE,QAAQ;KACrB,CAAC,CAAC;IAEH,IAAI,iBAAiB,KAAK,kBAAkB,CAAC,IAAI,EAAE,CAAC;QAClD,MAAM,eAAe,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAEpD,wEAAwE;QACxE,2EAA2E;QAC3E,gHAAgH;QAChH,OAAO,CAAC,SAAS,gCAAsB;YACrC,MAAM,EAAE,iBAAiB,KAAK,kBAAkB,CAAC,YAAY;YAC7D,UAAU,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;YAC1C,OAAO,EAAE;;gBAEP;;oBAEE;wBACE,OAAO,EAAE;4BACP,QAAQ,EAAE,MAAM,sBAAsB,EAAE;yBACzC;qBACF;iBACF;aACF;YACD,OAAO,EAAE;;;;;;aAMR;YACD,GAAI,eAAuB;SAC5B,CAAC,CAAC;QACH,+GAA+G;IACjH,CAAC;IAED,MAAM,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC;IAEpC,8EAA8E;IAC9E,kBAAkB;IAClB,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAElB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE;QAClB,IAAI,EAAE,IAAI,CAAC,YAAY;KACxB,CAAC,CAAC;IAEH,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC7C,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,MAAc,EAAE,EAAE;YAC7C,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,CAAC,WAAW,CAAC,CAAC;gBACpB,OAAO;YACT,CAAC;YAED,4EAA4E;YAC5E,cAAc;YACd,OAAO,CAAC,MAAM,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import browserify from 'browserify';\nimport { Readable } from 'readable-stream';\nimport type { LoaderDefinitionFunction } from 'webpack';\n\nimport { TranspilationModes } from '../../builders';\nimport type { LegacyOptions } from '../../config';\nimport { processDependencies } from '../../utils';\nimport { getBrowserslistTargets } from '../utils';\n\n/**\n * A Browserify loader for Webpack. This exists for backwards compatibility with\n * the legacy configuration format, in order to support the `bundlerCustomizer`\n * function.\n *\n * When this loader is used, the input file will be processed by Browserify, and\n * written to disk by Webpack. Most processing will be handled by Browserify, so\n * there are no benefits like tree-shaking.\n *\n * @param content - The input file contents as a string.\n * @param sourceMap - The source map of the input file.\n * @returns The Browserify loader.\n */\nconst loader: LoaderDefinitionFunction<LegacyOptions> = async function (\n  content,\n  sourceMap,\n) {\n  const config = this.getOptions();\n\n  const { transpilationMode } = config;\n\n  const bundler = browserify({\n    extensions: ['.js', '.jsx', '.ts', '.tsx'],\n    debug: Boolean(sourceMap),\n    standalone: '<snap>',\n  });\n\n  if (transpilationMode !== TranspilationModes.None) {\n    const babelifyOptions = processDependencies(config);\n\n    // We need to statically import all Browserify transforms, and all Babel\n    // presets and plugins, and calling `require` is the sanest way to do that.\n    /* eslint-disable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */\n    bundler.transform(require('babelify'), {\n      global: transpilationMode === TranspilationModes.LocalAndDeps,\n      extensions: ['.js', '.jsx', '.ts', '.tsx'],\n      presets: [\n        require('@babel/preset-typescript'),\n        [\n          require('@babel/preset-env'),\n          {\n            targets: {\n              browsers: await getBrowserslistTargets(),\n            },\n          },\n        ],\n      ],\n      plugins: [\n        require('@babel/plugin-transform-runtime'),\n        require('@babel/plugin-transform-class-properties'),\n        require('@babel/plugin-transform-private-methods'),\n        require('@babel/plugin-transform-class-static-block'),\n        require('@babel/plugin-transform-private-property-in-object'),\n      ],\n      ...(babelifyOptions as any),\n    });\n    /* eslint-enable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */\n  }\n\n  config.bundlerCustomizer?.(bundler);\n\n  // Browserify doesn't accept a string as an entry point, so we need to convert\n  // it to a stream.\n  const stream = new Readable();\n  stream.push(content);\n  stream.push(null);\n\n  bundler.add(stream, {\n    file: this.resourcePath,\n  });\n\n  return new Promise<Buffer>((resolve, reject) => {\n    bundler.bundle((bundleError, buffer: Buffer) => {\n      if (bundleError) {\n        reject(bundleError);\n        return;\n      }\n\n      // Browserify inlines the source map, so we just pass the output buffer back\n      // to Webpack.\n      resolve(buffer);\n    });\n  });\n};\n\nexport default loader;\n"]}