{"version":3,"file":"config.mjs","sourceRoot":"","sources":["../../src/webpack/config.ts"],"names":[],"mappings":"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","sourcesContent":["import SnapsWebpackPlugin from '@metamask/snaps-webpack-plugin';\nimport ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';\nimport type { Ora } from 'ora';\nimport { resolve } from 'path';\nimport TerserPlugin from 'terser-webpack-plugin';\nimport type { Configuration } from 'webpack';\nimport { DefinePlugin, ProgressPlugin, ProvidePlugin } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../config';\nimport { getFunctionLoader, wasm } from './loaders';\nimport {\n  SnapsBuiltInResolver,\n  SnapsBundleWarningsPlugin,\n  SnapsStatsPlugin,\n  SnapsWatchPlugin,\n} from './plugins';\nimport {\n  BROWSERSLIST_FILE,\n  getDefaultLoader,\n  getDevTool,\n  getEnvironmentVariables,\n  getFallbacks,\n  getImageSVG,\n  getProgressHandler,\n} from './utils';\n\nexport type WebpackOptions = {\n  /**\n   * Whether to watch for changes.\n   */\n  watch?: boolean;\n\n  /**\n   * Whether to evaluate the bundle. If this is set, it will override the\n   * `evaluate` option in the config object.\n   */\n  evaluate?: boolean;\n\n  /**\n   * The spinner to use for logging.\n   */\n  spinner?: Ora;\n};\n\n/**\n * Get the default Webpack configuration. This is the configuration that will\n * be used if the user doesn't provide a custom Webpack configuration. The\n * configuration is based on the snap config.\n *\n * The default configuration includes:\n *\n * - `SWC` to transpile TypeScript and JavaScript files.\n * - `TerserPlugin` to minify the bundle.\n * - `SnapsWebpackPlugin` to validate the bundle and update the manifest.\n *\n * It can be customized through the `customizeWebpackConfig` function in the\n * snap config, but in most cases, you shouldn't need to do that.\n *\n * @param config - The processed snap Webpack config.\n * @param options - The Webpack options.\n * @returns The default Webpack configuration.\n */\nexport async function getDefaultConfiguration(\n  config: ProcessedWebpackConfig,\n  options: WebpackOptions = {\n    evaluate: config.evaluate,\n  },\n): Promise<Configuration> {\n  const spinnerText = options.spinner?.text;\n  const builtInResolver =\n    config.stats.builtIns &&\n    new SnapsBuiltInResolver(config.stats.builtIns, options.spinner);\n\n  return {\n    /**\n     * The target is set to `browserslist` so that Webpack will compile the\n     * bundle to support the browsers specified in the `.browserslistrc` file.\n     * This Browserslist file contains the browsers that are supported by\n     * MetaMask Snaps.\n     *\n     * @see https://webpack.js.org/configuration/target/\n     */\n    target: `browserslist:${BROWSERSLIST_FILE}`,\n\n    /**\n     * The mode is set to `production` by default, so that Webpack will minify\n     * and optimize the bundle.\n     *\n     * @see https://webpack.js.org/configuration/mode/\n     */\n    mode: 'production',\n\n    /**\n     * The entry point is set to the `input` value from the config object.\n     *\n     * @see https://webpack.js.org/configuration/entry-context/\n     */\n    entry: config.input,\n\n    /**\n     * The devtool option controls how source maps are generated. We set it to\n     * the `sourceMap` value from the config object.\n     *\n     * @see https://webpack.js.org/configuration/devtool/\n     */\n    devtool: getDevTool(config.sourceMap),\n\n    /**\n     * The stats option controls how much information is printed to the console\n     * when Webpack is running. We set it to `none` so that we can control the\n     * output ourselves.\n     *\n     * @see https://webpack.js.org/configuration/stats/\n     */\n    stats: 'none',\n\n    /**\n     * The output options.\n     *\n     * @see https://webpack.js.org/configuration/output/\n     */\n    output: {\n      /**\n       * This indicates whether Webpack should clear the output directory\n       * before building. We set it to the `clean` value from the config\n       * object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputclean\n       */\n      clean: config.output.clean,\n\n      /**\n       * The filename of the bundle. We set it to the `filename` value from\n       * the config object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputfilename\n       */\n      filename: config.output.filename,\n\n      /**\n       * The path to the output directory. We set it to the `path` value from\n       * the config object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputpath\n       */\n      path: config.output.path,\n\n      /**\n       * The public path of the bundle. We set it to `/` by default, so that\n       * the bundle can be loaded from the root of the server.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputpublicpath\n       */\n      publicPath: '/',\n\n      /**\n       * The library configuration. This tells Webpack how to export the\n       * bundle.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputlibrary\n       */\n      library: {\n        /**\n         * This tells Webpack to export the bundle as a CommonJS module. This\n         * is necessary for MetaMask Snaps.\n         *\n         * @see https://webpack.js.org/configuration/output/#outputlibrarytarget\n         */\n        type: 'commonjs',\n      },\n\n      /**\n       * The chunk format. This tells Webpack how to export chunks. This is\n       * required because we use browserslist to target browsers, but Snaps are\n       * not fully compatible with browser APIs (such as `window` and\n       * `document`).\n       *\n       * @see https://webpack.js.org/configuration/output/#outputchunkformat\n       */\n      chunkFormat: 'commonjs',\n    },\n\n    /**\n     * The module configuration. This is where we tell Webpack how to handle\n     * different types of files.\n     *\n     * @see https://webpack.js.org/configuration/module/\n     */\n    module: {\n      rules: [\n        {\n          test: /\\.(js|jsx|mjs|cjs|ts|tsx)$/u,\n          exclude: /node_modules/u,\n          use: await getDefaultLoader(config),\n        },\n\n        /**\n         * This allows importing modules that uses `.js` and not `.mjs` for the\n         * ES build.\n         *\n         * @see https://webpack.js.org/configuration/module/#resolvefullyspecified\n         */\n        {\n          test: /\\.m?js$/u,\n          resolve: {\n            fullySpecified: false,\n          },\n        },\n\n        /**\n         * This allows importing `.svg` files as a string.\n         */\n        config.features.images && {\n          test: /\\.svg$/u,\n          // `asset/source` returns the source as a UTF-8 string.\n          type: 'asset/source',\n        },\n\n        /**\n         * This allows importing `.png` files as a data URL.\n         */\n        config.features.images && {\n          test: /\\.png$/u,\n          type: 'asset/inline',\n          generator: {\n            dataUrl: getImageSVG.bind(null, 'image/png'),\n          },\n        },\n\n        /**\n         * This allows importing `.jpe?g` files as a data URL.\n         */\n        config.features.images && {\n          test: /\\.jpe?g$/u,\n          type: 'asset/inline',\n          generator: {\n            dataUrl: getImageSVG.bind(null, 'image/jpeg'),\n          },\n        },\n\n        config.experimental.wasm && {\n          test: /\\.wasm$/u,\n          use: getFunctionLoader(wasm, {}),\n        },\n      ],\n    },\n\n    /**\n     * The resolve configuration. This tells Webpack how to resolve imports.\n     * We set it to resolve `.js` and `.ts` files.\n     *\n     * @see https://webpack.js.org/configuration/resolve/\n     */\n    resolve: {\n      /**\n       * The extensions to resolve. We set it to resolve `.(c|m)?jsx?` and\n       * `.tsx?` files.\n       */\n      extensions: ['.js', '.jsx', '.mjs', '.cjs', '.ts', '.tsx'],\n\n      /**\n       * The fallback options. This tells Webpack how to handle imports that\n       * aren't resolved. By default, we set Node.js built-ins to `false`, so\n       * that they are ignored.\n       */\n      fallback: getFallbacks(config.polyfills),\n\n      /**\n       * The plugins to use. We use the {@link SnapsBuiltInResolver} to show\n       * warnings about using Node.js built-ins, when no fallback is specified.\n       */\n      plugins: [builtInResolver],\n    },\n\n    /**\n     * The plugins to use.\n     *\n     * @see https://webpack.js.org/configuration/plugins/\n     */\n    plugins: [\n      /**\n       * The `ForkTsCheckerWebpackPlugin` is a Webpack plugin that checks\n       * Typescript type definitions, it does this in a separate process for speed.\n       */\n      config.typescript.enabled &&\n        new ForkTsCheckerWebpackPlugin({\n          typescript: {\n            build: true,\n            configFile: config.typescript.configFile,\n          },\n        }),\n\n      /**\n       * The `SnapsWebpackPlugin` is a Webpack plugin that checks and updates\n       * the manifest file, and evaluates the bundle in SES. While not strictly\n       * required, it's highly recommended to use this plugin.\n       */\n      new SnapsWebpackPlugin({\n        manifestPath: config.manifest.path,\n        writeManifest: config.manifest.update,\n        eval: !options.watch && options.evaluate,\n      }),\n\n      /**\n       * The `SnapsStatsPlugin` is a Webpack plugin that handles the stats\n       * output. It's used to show the stats in the terminal, in a format that\n       * is easy to read.\n       */\n      new SnapsStatsPlugin({ verbose: config.stats.verbose }, options.spinner),\n\n      /**\n       * The `DefinePlugin` is a Webpack plugin that adds static values to the\n       * bundle. We use it to add the `NODE_DEBUG`, `NODE_ENV`, and `DEBUG`\n       * environment variables, as well as any custom environment\n       * variables (as `process.env`).\n       */\n      new DefinePlugin(getEnvironmentVariables(config.environment)),\n\n      /**\n       * The `ProgressPlugin` is a Webpack plugin that logs the progress of\n       * the build. We set it to log the progress to the spinner.\n       */\n      new ProgressPlugin({\n        handler: getProgressHandler(options.spinner, spinnerText),\n      }),\n\n      /**\n       * The `SnapsBundleWarningPlugin` is a Webpack plugin that shows a\n       * warning when the bundle is potentially incompatible with MetaMask\n       * Snaps.\n       */\n      new SnapsBundleWarningsPlugin({\n        builtInResolver,\n        builtIns: Boolean(config.stats.builtIns),\n        buffer: config.stats.buffer,\n      }),\n\n      /**\n       * The `WatchPlugin` is a Webpack plugin that adds extra files to watch\n       * for changes. This is useful for rebuilding the bundle when the\n       * manifest file changes.\n       */\n      options.watch &&\n        new SnapsWatchPlugin(\n          {\n            bundle: resolve(config.output.path, config.output.filename),\n            evaluate: options.evaluate,\n            files: [config.manifest.path],\n          },\n          options.spinner,\n        ),\n\n      /**\n       * The `ProviderPlugin` is a Webpack plugin that automatically load\n       * modules instead of having to import or require them everywhere.\n       */\n      (config.polyfills === true ||\n        (config.polyfills !== false && config.polyfills.buffer)) &&\n        new ProvidePlugin({\n          Buffer: ['buffer', 'Buffer'],\n        }),\n    ].filter(Boolean),\n\n    /**\n     * The optimization configuration. This tells Webpack how to optimize the\n     * bundle. Most of the time, you won't need to change this, as the default\n     * options set by the `mode` option are sufficient.\n     */\n    optimization: {\n      minimize: config.output.minimize,\n\n      /**\n       * The minimizer to use. We set it to use the `TerserPlugin`.\n       */\n      minimizer: [\n        new TerserPlugin({\n          parallel: true,\n        }),\n      ],\n    },\n\n    /**\n     * The experiments configuration. This configures which Webpack\n     * experiments to enable/disable.\n     *\n     * @see https://webpack.js.org/configuration/experiments\n     */\n    experiments: {\n      /**\n       * Experimental support for top level await.\n       *\n       * This is unsupported in Snaps and therefore disabled.\n       *\n       * @see https://webpack.js.org/configuration/experiments/#experimentstoplevelawait\n       */\n      topLevelAwait: false,\n    },\n\n    /**\n     * The performance configuration. This tells Webpack how to handle\n     * performance hints.\n     *\n     * @see https://webpack.js.org/configuration/performance/\n     */\n    performance: {\n      /**\n       * The hints to show. We set it to `false`, so that we don't get\n       * performance hints, as they are not relevant for Snaps.\n       *\n       * @see https://webpack.js.org/configuration/performance/#performancehints\n       */\n      hints: false,\n    },\n\n    /**\n     * The infrastructure logging configuration. This tells Webpack how to\n     * log messages.\n     *\n     * @see https://webpack.js.org/configuration/infrastructure-logging\n     */\n    infrastructureLogging: {\n      /**\n       * The level of logging to use. We set it to `none`, so that we can\n       * control the output ourselves.\n       */\n      level: 'none',\n    },\n  };\n}\n"]}