{"version":3,"file":"server.mjs","sourceRoot":"","sources":["../../src/webpack/server.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SnapManifest } from '@metamask/snaps-utils';\nimport {\n  logError,\n  NpmSnapFileNames,\n  readJsonFile,\n} from '@metamask/snaps-utils/node';\nimport type { IncomingMessage, Server, ServerResponse } from 'http';\nimport { createServer } from 'http';\nimport type { AddressInfo } from 'net';\nimport { join, relative, resolve as resolvePath, sep, posix } from 'path';\nimport serveMiddleware from 'serve-handler';\n\nimport type { ProcessedConfig } from '../config';\n\n/**\n * Get the relative path from one path to another.\n *\n * Note: This is a modified version of `path.relative` that uses Posix\n * separators for URL-compatibility.\n *\n * @param from - The path to start from.\n * @param to - The path to end at.\n * @returns The relative path.\n */\nfunction getRelativePath(from: string, to: string) {\n  return relative(from, to).split(sep).join(posix.sep);\n}\n\n/**\n * Get the allowed paths for the static server. This includes the output file,\n * the manifest file, and any auxiliary/localization files.\n *\n * @param config - The config object.\n * @param manifest - The Snap manifest object.\n * @returns An array of allowed paths.\n */\nexport function getAllowedPaths(\n  config: ProcessedConfig,\n  manifest: SnapManifest,\n) {\n  const auxiliaryFiles =\n    manifest.source.files?.map((file) =>\n      getRelativePath(\n        config.server.root,\n        resolvePath(config.server.root, file),\n      ),\n    ) ?? [];\n\n  const localizationFiles =\n    manifest.source.locales?.map((localization) =>\n      getRelativePath(\n        config.server.root,\n        resolvePath(config.server.root, localization),\n      ),\n    ) ?? [];\n\n  const otherFiles = manifest.source.location.npm.iconPath\n    ? [\n        getRelativePath(\n          config.server.root,\n          resolvePath(\n            config.server.root,\n            manifest.source.location.npm.iconPath,\n          ),\n        ),\n      ]\n    : [];\n\n  return [\n    getRelativePath(\n      config.server.root,\n      resolvePath(\n        config.server.root,\n        config.output.path,\n        config.output.filename,\n      ),\n    ),\n    getRelativePath(\n      config.server.root,\n      resolvePath(config.server.root, NpmSnapFileNames.Manifest),\n    ),\n    ...auxiliaryFiles,\n    ...localizationFiles,\n    ...otherFiles,\n  ];\n}\n\n/**\n * Get a static server for development purposes.\n *\n * Note: We're intentionally not using `webpack-dev-server` here because it\n * adds a lot of extra stuff to the output that we don't need, and it's\n * difficult to customize.\n *\n * @param config - The config object.\n * @returns An object with a `listen` method that returns a promise that\n * resolves when the server is listening.\n */\nexport function getServer(config: ProcessedConfig) {\n  /**\n   * Get the response for a request. This is extracted into a function so that\n   * we can easily catch errors and send a 500 response.\n   *\n   * @param request - The request.\n   * @param response - The response.\n   * @returns A promise that resolves when the response is sent.\n   */\n  async function getResponse(\n    request: IncomingMessage,\n    response: ServerResponse,\n  ) {\n    const manifestPath = join(config.server.root, NpmSnapFileNames.Manifest);\n    const { result } = await readJsonFile<SnapManifest>(manifestPath);\n    const allowedPaths = getAllowedPaths(config, result);\n\n    const pathname =\n      request.url &&\n      request.headers.host &&\n      new URL(request.url, `http://${request.headers.host}`).pathname;\n    const path = pathname?.slice(1);\n    const allowed = allowedPaths.some((allowedPath) => path === allowedPath);\n\n    if (!allowed) {\n      response.statusCode = 404;\n      response.end();\n      return;\n    }\n\n    await serveMiddleware(request, response, {\n      public: config.server.root,\n      directoryListing: false,\n      headers: [\n        {\n          source: '**/*',\n          headers: [\n            {\n              key: 'Cache-Control',\n              value: 'no-cache',\n            },\n            {\n              key: 'Access-Control-Allow-Origin',\n              value: '*',\n            },\n          ],\n        },\n      ],\n    });\n  }\n\n  const server = createServer((request, response) => {\n    getResponse(request, response).catch(\n      /* istanbul ignore next */\n      (error) => {\n        logError(error);\n        response.statusCode = 500;\n        response.end();\n      },\n    );\n  });\n\n  /**\n   * Start the server on the port specified in the config.\n   *\n   * @param port - The port to listen on.\n   * @returns A promise that resolves when the server is listening. The promise\n   * resolves to an object with the port and the server instance. Note that if\n   * the `config.server.port` is `0`, the OS will choose a random port for us,\n   * so we need to get the port from the server after it starts.\n   */\n  const listen = async (port = config.server.port) => {\n    return new Promise<{\n      port: number;\n      server: Server;\n      close: () => Promise<void>;\n    }>((resolve, reject) => {\n      try {\n        server.listen(port, () => {\n          const close = async () => {\n            await new Promise<void>((resolveClose, rejectClose) => {\n              server.close((closeError) => {\n                if (closeError) {\n                  return rejectClose(closeError);\n                }\n\n                return resolveClose();\n              });\n            });\n          };\n\n          const address = server.address() as AddressInfo;\n          resolve({ port: address.port, server, close });\n        });\n      } catch (listenError) {\n        reject(listenError);\n      }\n    });\n  };\n\n  return { listen };\n}\n"]}