"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = exports.checkNodeVersion = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const package_json_1 = __importDefault(require("@metamask/snaps-cli/package.json"));
const semver_1 = __importDefault(require("semver"));
const yargs_1 = __importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
const builders_1 = __importDefault(require("./builders.cjs"));
const config_1 = require("./config.cjs");
const utils_1 = require("./utils/index.cjs");
/**
 * Check the Node version. If the Node version is less than the minimum required
 * version, this logs an error and exits the process.
 *
 * @param nodeVersion - The Node version to check.
 */
function checkNodeVersion(nodeVersion = process.version.slice(1)) {
    const versionRange = package_json_1.default.engines.node;
    const minimumVersion = semver_1.default.minVersion(versionRange).format();
    if (!semver_1.default.satisfies(nodeVersion, versionRange)) {
        (0, utils_1.error)(`Node version ${nodeVersion} is not supported. Please use Node ${minimumVersion} or later.`);
        // eslint-disable-next-line n/no-process-exit
        process.exit(1);
    }
}
exports.checkNodeVersion = checkNodeVersion;
/**
 * The main CLI entry point function. This processes the command line args, and
 * runs the appropriate function.
 *
 * @param argv - The raw command line arguments, i.e., `process.argv`.
 * @param commands - The list of commands to use.
 */
async function cli(argv, commands) {
    checkNodeVersion();
    await (0, yargs_1.default)((0, helpers_1.hideBin)(argv))
        .scriptName('mm-snap')
        .usage('Usage: $0 <command> [options]')
        .example('$0 build', `Build './src/index.js' as './dist/bundle.js'`)
        .example('$0 build --config ./snap.config.build.ts', `Build './src/index.js' as './dist/bundle.js' using the config in './snap.config.build.ts'`)
        .example('$0 manifest --fix', `Check the snap manifest, and fix any errors`)
        .example('$0 watch --port 8000', `The snap input file for changes, and serve it on port 8000`)
        .example('$0 serve --port 8000', `Serve the snap bundle on port 8000`)
        .command(commands)
        .option('config', builders_1.default.config)
        .option('verboseErrors', builders_1.default.verboseErrors)
        .option('suppressWarnings', builders_1.default.suppressWarnings)
        .strict()
        .middleware(async (args) => {
        // eslint-disable-next-line require-atomic-updates
        args.context = {
            config: await (0, config_1.getConfigByArgv)(args),
        };
        (0, utils_1.sanitizeInputs)(args);
    }, false)
        .demandCommand(1, 'You must specify at least one command.')
        .fail((message, failure) => {
        (0, utils_1.error)((0, utils_1.getYargsErrorMessage)(message, failure));
        // eslint-disable-next-line n/no-process-exit
        process.exit(1);
    })
        .help()
        .alias('help', 'h')
        .parseAsync();
}
exports.cli = cli;
//# sourceMappingURL=cli.cjs.map