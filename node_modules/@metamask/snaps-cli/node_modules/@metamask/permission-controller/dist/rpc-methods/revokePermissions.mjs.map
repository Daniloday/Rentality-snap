{"version":3,"file":"revokePermissions.mjs","sourceRoot":"","sources":["../../src/rpc-methods/revokePermissions.ts"],"names":[],"mappings":"AACA,OAAO,EACL,eAAe,EAKhB,wBAAwB;AAEzB,OAAO,EAAE,aAAa,EAAE,sBAAkB;AAG1C,OAAO,EAAE,WAAW,EAAE,qBAAiB;AAEvC,MAAM,CAAC,MAAM,wBAAwB,GAIjC;IACF,WAAW,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC;IAC5C,cAAc,EAAE,+BAA+B;IAC/C,SAAS,EAAE;QACT,0BAA0B,EAAE,IAAI;KACjC;CACF,CAAC;AAeF;;;;;;;;;;GAUG;AACH,KAAK,UAAU,+BAA+B,CAC5C,GAAyC,EACzC,GAAiC,EACjC,KAAc,EACd,GAA6B,EAC7B,EAAE,0BAA0B,EAA0B;IAEtD,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;IAEvB,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;IAE1B,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;KACvD;IAED,sDAAsD;IACtD,iCAAiC;IACjC,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAE1C,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE;QACpC,OAAO,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;KACvD;IAED,0BAA0B,CAAC,cAAc,CAAC,CAAC;IAE3C,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;IAElB,OAAO,GAAG,EAAE,CAAC;AACf,CAAC","sourcesContent":["import type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport {\n  isNonEmptyArray,\n  type Json,\n  type JsonRpcRequest,\n  type NonEmptyArray,\n  type PendingJsonRpcResponse,\n} from '@metamask/utils';\n\nimport { invalidParams } from '../errors';\nimport type { PermissionConstraint } from '../Permission';\nimport type { PermittedHandlerExport } from '../utils';\nimport { MethodNames } from '../utils';\n\nexport const revokePermissionsHandler: PermittedHandlerExport<\n  RevokePermissionsHooks,\n  RevokePermissionArgs,\n  null\n> = {\n  methodNames: [MethodNames.RevokePermissions],\n  implementation: revokePermissionsImplementation,\n  hookNames: {\n    revokePermissionsForOrigin: true,\n  },\n};\n\nexport type RevokePermissionArgs = Record<\n  PermissionConstraint['parentCapability'],\n  Json\n>;\n\ntype RevokePermissions = (\n  permissions: NonEmptyArray<PermissionConstraint['parentCapability']>,\n) => void;\n\nexport type RevokePermissionsHooks = {\n  revokePermissionsForOrigin: RevokePermissions;\n};\n\n/**\n * Revoke Permissions implementation to be used in JsonRpcEngine middleware.\n *\n * @param req - The JsonRpcEngine request\n * @param res - The JsonRpcEngine result object\n * @param _next - JsonRpcEngine next() callback - unused\n * @param end - JsonRpcEngine end() callback\n * @param options - Method hooks passed to the method implementation\n * @param options.revokePermissionsForOrigin - A hook that revokes given permission keys for an origin\n * @returns A promise that resolves to nothing\n */\nasync function revokePermissionsImplementation(\n  req: JsonRpcRequest<RevokePermissionArgs>,\n  res: PendingJsonRpcResponse<null>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { revokePermissionsForOrigin }: RevokePermissionsHooks,\n): Promise<void> {\n  const { params } = req;\n\n  const param = params?.[0];\n\n  if (!param) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  // For now, this API revokes the entire permission key\n  // even if caveats are specified.\n  const permissionKeys = Object.keys(param);\n\n  if (!isNonEmptyArray(permissionKeys)) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  revokePermissionsForOrigin(permissionKeys);\n\n  res.result = null;\n\n  return end();\n}\n"]}