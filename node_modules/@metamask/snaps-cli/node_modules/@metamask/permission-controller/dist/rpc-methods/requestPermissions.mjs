import { isPlainObject } from "@metamask/controller-utils";
import { invalidParams } from "../errors.mjs";
import { MethodNames } from "../utils.mjs";
export const requestPermissionsHandler = {
    methodNames: [MethodNames.RequestPermissions],
    implementation: requestPermissionsImplementation,
    hookNames: {
        requestPermissionsForOrigin: true,
    },
};
/**
 * Request Permissions implementation to be used in JsonRpcEngine middleware.
 *
 * @param req - The JsonRpcEngine request
 * @param res - The JsonRpcEngine result object
 * @param _next - JsonRpcEngine next() callback - unused
 * @param end - JsonRpcEngine end() callback
 * @param options - Method hooks passed to the method implementation
 * @param options.requestPermissionsForOrigin - The specific method hook needed for this method implementation
 * @returns A promise that resolves to nothing
 */
async function requestPermissionsImplementation(req, res, _next, end, { requestPermissionsForOrigin }) {
    const { params } = req;
    if (!Array.isArray(params) || !isPlainObject(params[0])) {
        return end(invalidParams({ data: { request: req } }));
    }
    const [requestedPermissions] = params;
    const [grantedPermissions] = await requestPermissionsForOrigin(requestedPermissions);
    // `wallet_requestPermission` is specified to return an array.
    res.result = Object.values(grantedPermissions);
    return end();
}
//# sourceMappingURL=requestPermissions.mjs.map