{"version":3,"file":"iframe.test.browser.mjs","sourceRoot":"","sources":["../src/iframe.test.browser.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,qBAAiB;AAExC,MAAM,UAAU,GAAG,uBAAuB,CAAC;AAE3C,MAAM,WAAW,GAAG,QAAQ,CAAC;AAE7B,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,MAAM,EAAE,CAAC;YACX,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;QAClF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAsB,CAAC;QAEzE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,MAAM,YAAY,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAsB,CAAC;QAEzE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,MAAM,YAAY,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,WAAW,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACzE,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAsB,CAAC;QAEzE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,MAAM,GAAG,SAAS,CAAC;QAEzB,MAAM,YAAY,CAAC;YACjB,GAAG,EAAE,UAAU;YACf,EAAE,EAAE,WAAW;YACf,MAAM;SACP,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAsB,CAAC;QAEzE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,YAAY,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAsB,CAAC;QAEzE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createWindow } from './iframe';\n\nconst IFRAME_URL = `http://localhost:4569`;\n\nconst MOCK_JOB_ID = 'job-id';\n\ndescribe('createWindow', () => {\n  afterEach(() => {\n    const iframe = document.getElementById(MOCK_JOB_ID);\n    if (iframe) {\n      document.body.removeChild(iframe);\n    }\n  });\n\n  it('creates an iframe window with the provided job ID as the iframe ID', async () => {\n    const window = await createWindow({ uri: IFRAME_URL, id: MOCK_JOB_ID });\n    const iframe = document.getElementById(MOCK_JOB_ID) as HTMLIFrameElement;\n\n    expect(iframe).toBeDefined();\n    expect(iframe.contentWindow).toBe(window);\n    expect(iframe.id).toBe(MOCK_JOB_ID);\n  });\n\n  it('sets the sandbox attribute when the sandbox option is true', async () => {\n    await createWindow({ uri: IFRAME_URL, id: MOCK_JOB_ID, sandbox: true });\n    const iframe = document.getElementById(MOCK_JOB_ID) as HTMLIFrameElement;\n\n    expect(iframe).toBeDefined();\n    expect(iframe.getAttribute('sandbox')).toBe('allow-scripts');\n  });\n\n  it('does not set the sandbox attribute when the sandbox option is false', async () => {\n    await createWindow({ uri: IFRAME_URL, id: MOCK_JOB_ID, sandbox: false });\n    const iframe = document.getElementById(MOCK_JOB_ID) as HTMLIFrameElement;\n\n    expect(iframe).toBeDefined();\n    expect(iframe.getAttribute('sandbox')).toBeNull();\n  });\n\n  it('sets the data-testid attribute when provided', async () => {\n    const testId = 'test-id';\n\n    await createWindow({\n      uri: IFRAME_URL,\n      id: MOCK_JOB_ID,\n      testId,\n    });\n    const iframe = document.getElementById(MOCK_JOB_ID) as HTMLIFrameElement;\n\n    expect(iframe).toBeDefined();\n    expect(iframe.getAttribute('data-testid')).toBe(testId);\n  });\n\n  it('uses the default data-testid attribute when not provided', async () => {\n    await createWindow({ uri: IFRAME_URL, id: MOCK_JOB_ID });\n    const iframe = document.getElementById(MOCK_JOB_ID) as HTMLIFrameElement;\n\n    expect(iframe).toBeDefined();\n    expect(iframe.getAttribute('data-testid')).toBe('snaps-iframe');\n  });\n});\n"]}