{"version":3,"file":"handlers.cjs","sourceRoot":"","sources":["../src/handlers.ts"],"names":[],"mappings":";;;AAYA,mDAA8E;AAC9E,uDAU+B;AAG/B,uDAA8C;AAQjC,QAAA,YAAY,GAAG;IAC1B,CAAC,2BAAW,CAAC,YAAY,CAAC,EAAE;QAC1B,IAAI,EAAE,2BAAW,CAAC,YAAY;QAC9B,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC,UAAmB,EAAqC,EAAE;YACpE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,aAAa,CAAC,EAAE;QAC3B,IAAI,EAAE,2BAAW,CAAC,aAAa;QAC/B,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC,UAAmB,EAAsC,EAAE;YACrE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,SAAS,CAAC,EAAE;QACvB,IAAI,EAAE,2BAAW,CAAC,SAAS;QAC3B,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC,UAAmB,EAAkC,EAAE;YACjE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,YAAY,CAAC,EAAE;QAC1B,IAAI,EAAE,2BAAW,CAAC,YAAY;QAC9B,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC,UAAmB,EAAqC,EAAE;YACpE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,SAAS,CAAC,EAAE;QACvB,IAAI,EAAE,2BAAW,CAAC,SAAS;QAC3B,QAAQ,EAAE,KAAK;QACf,SAAS,EAAE,CAAC,UAAmB,EAAkC,EAAE;YACjE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,QAAQ,CAAC,EAAE;QACtB,IAAI,EAAE,2BAAW,CAAC,QAAQ;QAC1B,QAAQ,EAAE,KAAK;QACf,SAAS,EAAE,CAAC,UAAmB,EAAiC,EAAE;YAChE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,gBAAgB,CAAC,EAAE;QAC9B,IAAI,EAAE,2BAAW,CAAC,gBAAgB;QAClC,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC,UAAmB,EAAyC,EAAE;YACxE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,UAAU,CAAC,EAAE;QACxB,IAAI,EAAE,2BAAW,CAAC,UAAU;QAC5B,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC,UAAmB,EAAmC,EAAE;YAClE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,WAAW,CAAC,EAAE;QACzB,IAAI,EAAE,2BAAW,CAAC,WAAW;QAC7B,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC,UAAmB,EAAoC,EAAE;YACnE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;IACD,CAAC,2BAAW,CAAC,WAAW,CAAC,EAAE;QACzB,IAAI,EAAE,2BAAW,CAAC,WAAW;QAC7B,QAAQ,EAAE,KAAK;QACf,SAAS,EAAE,CAAC,UAAmB,EAAoC,EAAE;YACnE,OAAO,OAAO,UAAU,KAAK,UAAU,CAAC;QAC1C,CAAC;KACF;CACO,CAAC;AAEE,QAAA,mCAAmC,GAAG,IAAA,oBAAM,EAAC;IACxD,QAAQ,EAAE,IAAA,sBAAQ,EAAC,IAAA,qBAAO,EAAC,yBAAa,CAAC,QAAQ,CAAC,CAAC;CACpD,CAAC,CAAC;AAEU,QAAA,iCAAiC,GAAG,IAAA,oBAAM,EACrD,2CAAmC,EACnC,IAAA,oBAAM,EAAC;IACL,EAAE,EAAE,IAAA,oBAAM,GAAE;CACb,CAAC,CACH,CAAC;AAEW,QAAA,sCAAsC,GAAG,IAAA,oBAAM,EAC1D,2CAAmC,EACnC,IAAA,oBAAM,EAAC;IACL,OAAO,EAAE,oCAAwB;CAClC,CAAC,CACH,CAAC;AAEW,QAAA,2BAA2B,GAAG,IAAA,sBAAQ,EACjD,IAAA,mBAAK,EAAC;IACJ,8CAAsC;IACtC,yCAAiC;CAClC,CAAC,CACH,CAAC;AAEW,QAAA,yBAAyB,GAAG,mCAA2B,CAAC;AAExD,QAAA,mCAAmC,GAAG,IAAA,oBAAM,EAAC;IACxD,OAAO,EAAE,oCAAwB;CAClC,CAAC,CAAC;AAEU,QAAA,8BAA8B,GAAG,IAAA,oBAAM,EAAC;IACnD,EAAE,EAAE,IAAA,oBAAM,GAAE;CACb,CAAC,CAAC;AAEU,QAAA,wBAAwB,GAAG,IAAA,mBAAK,EAAC;IAC5C,2CAAmC;IACnC,sCAA8B;CAC/B,CAAC,CAAC;AAEU,QAAA,uBAAuB,GAAG,IAAA,oBAAM,EAAC;IAC5C,QAAQ,EAAE,IAAA,oBAAM,GAAE;IAClB,cAAc,EAAE,IAAA,oBAAM,GAAE;CACzB,CAAC,CAAC;AAEU,QAAA,sBAAsB,GAAG,IAAA,oBAAM,EAAC;IAC3C,QAAQ,EAAE,IAAA,oBAAM,GAAE;IAClB,eAAe,EAAE,IAAA,oBAAM,GAAE;IACzB,UAAU,EAAE,IAAA,oBAAM,GAAE;CACrB,CAAC,CAAC;AAEU,QAAA,+BAA+B,GAAG,IAAA,oBAAM,EAAC;IACpD,eAAe,EAAE,IAAA,kBAAI,EAAC,IAAA,mBAAK,EAAC,+BAAuB,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;CACnE,CAAC,CAAC;AAEU,QAAA,8BAA8B,GAAG,IAAA,oBAAM,EAAC;IACnD,iBAAiB,EAAE,IAAA,kBAAI,EAAC,IAAA,mBAAK,EAAC,8BAAsB,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;CACpE,CAAC,CAAC;AAEU,QAAA,0BAA0B,GAAG,IAAA,sBAAQ,EAChD,IAAA,mBAAK,EAAC,CAAC,uCAA+B,EAAE,sCAA8B,CAAC,CAAC,CACzE,CAAC","sourcesContent":["import type {\n  OnCronjobHandler,\n  OnHomePageHandler,\n  OnInstallHandler,\n  OnKeyringRequestHandler,\n  OnNameLookupHandler,\n  OnRpcRequestHandler,\n  OnSignatureHandler,\n  OnTransactionHandler,\n  OnUpdateHandler,\n  OnUserInputHandler,\n} from '@metamask/snaps-sdk';\nimport { ComponentOrElementStruct, SeverityLevel } from '@metamask/snaps-sdk';\nimport {\n  assign,\n  literal,\n  nullable,\n  object,\n  optional,\n  string,\n  array,\n  size,\n  union,\n} from '@metamask/superstruct';\n\nimport type { SnapHandler } from './handler-types';\nimport { HandlerType } from './handler-types';\n\nexport type SnapRpcHookArgs = {\n  origin: string;\n  handler: HandlerType;\n  request: Record<string, unknown>;\n};\n\nexport const SNAP_EXPORTS = {\n  [HandlerType.OnRpcRequest]: {\n    type: HandlerType.OnRpcRequest,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnRpcRequestHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnTransaction]: {\n    type: HandlerType.OnTransaction,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnTransactionHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnCronjob]: {\n    type: HandlerType.OnCronjob,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnCronjobHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnNameLookup]: {\n    type: HandlerType.OnNameLookup,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnNameLookupHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnInstall]: {\n    type: HandlerType.OnInstall,\n    required: false,\n    validator: (snapExport: unknown): snapExport is OnInstallHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnUpdate]: {\n    type: HandlerType.OnUpdate,\n    required: false,\n    validator: (snapExport: unknown): snapExport is OnUpdateHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnKeyringRequest]: {\n    type: HandlerType.OnKeyringRequest,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnKeyringRequestHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnHomePage]: {\n    type: HandlerType.OnHomePage,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnHomePageHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnSignature]: {\n    type: HandlerType.OnSignature,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnSignatureHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnUserInput]: {\n    type: HandlerType.OnUserInput,\n    required: false,\n    validator: (snapExport: unknown): snapExport is OnUserInputHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n} as const;\n\nexport const OnTransactionSeverityResponseStruct = object({\n  severity: optional(literal(SeverityLevel.Critical)),\n});\n\nexport const OnTransactionResponseWithIdStruct = assign(\n  OnTransactionSeverityResponseStruct,\n  object({\n    id: string(),\n  }),\n);\n\nexport const OnTransactionResponseWithContentStruct = assign(\n  OnTransactionSeverityResponseStruct,\n  object({\n    content: ComponentOrElementStruct,\n  }),\n);\n\nexport const OnTransactionResponseStruct = nullable(\n  union([\n    OnTransactionResponseWithContentStruct,\n    OnTransactionResponseWithIdStruct,\n  ]),\n);\n\nexport const OnSignatureResponseStruct = OnTransactionResponseStruct;\n\nexport const OnHomePageResponseWithContentStruct = object({\n  content: ComponentOrElementStruct,\n});\n\nexport const OnHomePageResponseWithIdStruct = object({\n  id: string(),\n});\n\nexport const OnHomePageResponseStruct = union([\n  OnHomePageResponseWithContentStruct,\n  OnHomePageResponseWithIdStruct,\n]);\n\nexport const AddressResolutionStruct = object({\n  protocol: string(),\n  resolvedDomain: string(),\n});\n\nexport const DomainResolutionStruct = object({\n  protocol: string(),\n  resolvedAddress: string(),\n  domainName: string(),\n});\n\nexport const AddressResolutionResponseStruct = object({\n  resolvedDomains: size(array(AddressResolutionStruct), 1, Infinity),\n});\n\nexport const DomainResolutionResponseStruct = object({\n  resolvedAddresses: size(array(DomainResolutionStruct), 1, Infinity),\n});\n\nexport const OnNameLookupResponseStruct = nullable(\n  union([AddressResolutionResponseStruct, DomainResolutionResponseStruct]),\n);\n\n/**\n * Utility type for getting the handler function type from a handler type.\n */\nexport type HandlerFunction<Type extends SnapHandler> =\n  Type['validator'] extends (snapExport: unknown) => snapExport is infer Handler\n    ? Handler\n    : never;\n\n/**\n * All the function-based handlers that a snap can implement.\n */\nexport type SnapFunctionExports = {\n  [Key in keyof typeof SNAP_EXPORTS]?: HandlerFunction<\n    (typeof SNAP_EXPORTS)[Key]\n  >;\n};\n\n/**\n * All handlers that a snap can implement.\n */\nexport type SnapExports = SnapFunctionExports;\n"]}