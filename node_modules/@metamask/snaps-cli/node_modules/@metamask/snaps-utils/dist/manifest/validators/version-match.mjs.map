{"version":3,"file":"version-match.mjs","sourceRoot":"","sources":["../../../src/manifest/validators/version-match.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,wBAAoB;AAG/C;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAkB;IACzC,QAAQ,EAAE,OAAO;IACjB,aAAa,CAAC,KAAK,EAAE,OAAO;QAC1B,MAAM,kBAAkB,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC;QAC5D,MAAM,sBAAsB,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC;QAC7D,IAAI,kBAAkB,KAAK,sBAAsB,EAAE,CAAC;YAClD,OAAO,CAAC,MAAM,CACZ,IAAI,gBAAgB,CAAC,QAAQ,2BAA2B,sBAAsB,0BAA0B,gBAAgB,CAAC,WAAW,uBAAuB,kBAAkB,KAAK,EAClL,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;gBACf,QAAQ,CAAC,OAAO,GAAG,kBAAkB,CAAC;gBACtC,OAAO,EAAE,QAAQ,EAAE,CAAC;YACtB,CAAC,CACF,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAC","sourcesContent":["import { NpmSnapFileNames } from '../../types';\nimport type { ValidatorMeta } from '../validator-types';\n\n/**\n * Check if the version in manifest is the same as in package.json.\n */\nexport const versionMatch: ValidatorMeta = {\n  severity: 'error',\n  semanticCheck(files, context) {\n    const packageJsonVersion = files.packageJson.result.version;\n    const manifestPackageVersion = files.manifest.result.version;\n    if (packageJsonVersion !== manifestPackageVersion) {\n      context.report(\n        `\"${NpmSnapFileNames.Manifest}\" npm package version (\"${manifestPackageVersion}\") does not match the \"${NpmSnapFileNames.PackageJson}\" \"version\" field (\"${packageJsonVersion}\").`,\n        ({ manifest }) => {\n          manifest.version = packageJsonVersion;\n          return { manifest };\n        },\n      );\n    }\n  },\n};\n"]}