{"version":3,"file":"is-localization-file.cjs","sourceRoot":"","sources":["../../../src/manifest/validators/is-localization-file.ts"],"names":[],"mappings":";;;AAAA,uDAAiD;AAEjD,yDAA4D;AAC5D,+CAAwD;AAGxD;;GAEG;AACU,QAAA,kBAAkB,GAAkB;IAC/C,QAAQ,EAAE,OAAO;IACjB,cAAc,CAAC,KAAK,EAAE,OAAO;QAC3B,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,GAAG,IAAA,sBAAQ,EAAC,IAAI,CAAC,MAAM,EAAE,qCAAsB,CAAC,CAAC;YAE9D,IAAI,KAAK,EAAE,CAAC;gBACV,KAAK,MAAM,OAAO,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC;oBACvC,OAAO,CAAC,MAAM,CACZ,yCACE,IAAI,CAAC,IACP,MAAM,IAAA,iCAAuB,EAC3B,qCAAsB,EACtB,OAAO,EACP,KAAK,CACN,EAAE,CACJ,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;CACF,CAAC","sourcesContent":["import { validate } from '@metamask/superstruct';\n\nimport { LocalizationFileStruct } from '../../localization';\nimport { getStructFailureMessage } from '../../structs';\nimport type { ValidatorMeta } from '../validator-types';\n\n/**\n * Verify the structure of localization files.\n */\nexport const isLocalizationFile: ValidatorMeta = {\n  severity: 'error',\n  structureCheck(files, context) {\n    for (const file of files.localizationFiles) {\n      const [error] = validate(file.result, LocalizationFileStruct);\n\n      if (error) {\n        for (const failure of error.failures()) {\n          context.report(\n            `Failed to validate localization file \"${\n              file.path\n            }\": ${getStructFailureMessage(\n              LocalizationFileStruct,\n              failure,\n              false,\n            )}`,\n          );\n        }\n      }\n    }\n  },\n};\n"]}