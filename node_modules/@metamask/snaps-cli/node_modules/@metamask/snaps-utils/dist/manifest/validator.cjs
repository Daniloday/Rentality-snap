"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Context_nextSeverity;
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasFixes = exports.runValidators = void 0;
const utils_1 = require("@metamask/utils");
const defaultValidators = __importStar(require("./validators/index.cjs"));
class Context {
    constructor() {
        this.reports = [];
        _Context_nextSeverity.set(this, undefined);
    }
    report(message, fix) {
        (0, utils_1.assert)(__classPrivateFieldGet(this, _Context_nextSeverity, "f") !== undefined);
        this.reports.push({
            severity: __classPrivateFieldGet(this, _Context_nextSeverity, "f"),
            message,
            fix,
        });
    }
    prepareForValidator(settings) {
        __classPrivateFieldSet(this, _Context_nextSeverity, settings.severity, "f");
    }
    get hasErrors() {
        return this.reports.some((report) => report.severity === 'error');
    }
}
_Context_nextSeverity = new WeakMap();
/**
 * Verify that snap files are completely valid.
 * First it runs validators on unparsed files to check structure.
 * Secondly it runs validators on parsed files to check semantics.
 *
 * @param files - All files required to run a snap.
 * @param rules - Validators to run.
 * @returns The validation results.
 */
// TODO(ritave): snap.manifest.json and package.json should check
//               json parsing as well instead of assuming it's
//               already parsed
async function runValidators(files, rules = Object.values(defaultValidators)) {
    const context = new Context();
    for (const rule of rules) {
        context.prepareForValidator({
            severity: rule.severity,
        });
        await rule.structureCheck?.(files, context);
    }
    if (context.hasErrors) {
        return {
            reports: context.reports,
        };
    }
    for (const rule of rules) {
        context.prepareForValidator({
            severity: rule.severity,
        });
        await rule.semanticCheck?.(files, context);
    }
    return {
        files: files,
        reports: context.reports,
    };
}
exports.runValidators = runValidators;
/**
 * Get whether any reports has pending fixes.
 *
 * @param results - Results of the validation run.
 * @returns Whether there are fixes pending.
 */
function hasFixes(results) {
    return results.reports.some((report) => report.fix);
}
exports.hasFixes = hasFixes;
//# sourceMappingURL=validator.cjs.map