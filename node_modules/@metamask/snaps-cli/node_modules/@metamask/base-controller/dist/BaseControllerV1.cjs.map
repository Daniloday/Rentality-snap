{"version":3,"file":"BaseControllerV1.cjs","sourceRoot":"","sources":["../src/BaseControllerV1.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PublicInterface } from '@metamask/utils';\n\nimport type { ControllerInstance } from './BaseControllerV2';\n\n/**\n * Determines if the given controller is an instance of `BaseControllerV1`\n *\n * @param controller - Controller instance to check\n * @returns True if the controller is an instance of `BaseControllerV1`\n */\nexport function isBaseControllerV1(\n  controller: ControllerInstance,\n): controller is BaseControllerV1Instance {\n  return (\n    'name' in controller &&\n    typeof controller.name === 'string' &&\n    'config' in controller &&\n    typeof controller.config === 'object' &&\n    'defaultConfig' in controller &&\n    typeof controller.defaultConfig === 'object' &&\n    'state' in controller &&\n    typeof controller.state === 'object' &&\n    'defaultState' in controller &&\n    typeof controller.defaultState === 'object' &&\n    'disabled' in controller &&\n    typeof controller.disabled === 'boolean' &&\n    'subscribe' in controller &&\n    typeof controller.subscribe === 'function'\n  );\n}\n\n/**\n * State change callbacks\n */\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type Listener<T> = (state: T) => void;\n\n/**\n * @type BaseConfig\n *\n * Base controller configuration\n * @property disabled - Determines if this controller is enabled\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface BaseConfig {\n  disabled?: boolean;\n}\n\n/**\n * @type BaseState\n *\n * Base state representation\n * @property name - Unique name for this controller\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface BaseState {\n  name?: string;\n}\n\n/**\n * The narrowest supertype for `BaseControllerV1` config objects.\n * This type can be assigned to any `BaseControllerV1` config object.\n */\nexport type ConfigConstraint = BaseConfig & object;\n\n/**\n * The narrowest supertype for `BaseControllerV1` state objects.\n * This type can be assigned to any `BaseControllerV1` state object.\n */\nexport type StateConstraint = BaseState & object;\n\n/**\n * The widest subtype of all controller instances that extend from `BaseControllerV1`.\n * Any `BaseControllerV1` instance can be assigned to this type.\n */\nexport type BaseControllerV1Instance = PublicInterface<\n  BaseControllerV1<ConfigConstraint, StateConstraint>\n>;\n\n/**\n * @deprecated This class has been renamed to BaseControllerV1 and is no longer recommended for use for controllers. Please use BaseController (formerly BaseControllerV2) instead.\n *\n * Controller class that provides configuration, state management, and subscriptions.\n *\n * The core purpose of every controller is to maintain an internal data object\n * called \"state\". Each controller is responsible for its own state, and all global wallet state\n * is tracked in a controller as state.\n */\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class BaseControllerV1<C extends BaseConfig, S extends BaseState> {\n  /**\n   * Default options used to configure this controller\n   */\n  defaultConfig: C = {} as never;\n\n  /**\n   * Default state set on this controller\n   */\n  defaultState: S = {} as never;\n\n  /**\n   * Determines if listeners are notified of state changes\n   */\n  disabled = false;\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'BaseController';\n\n  private readonly initialConfig: Partial<C>;\n\n  private readonly initialState: Partial<S>;\n\n  private internalConfig: C = this.defaultConfig;\n\n  private internalState: S = this.defaultState;\n\n  private readonly internalListeners: Listener<S>[] = [];\n\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config: Partial<C> = {}, state: Partial<S> = {}) {\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  protected initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config: Partial<C>, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite\n        ? (config as C)\n        : Object.assign(this.internalConfig, config);\n\n      for (const key of Object.keys(this.internalConfig) as (keyof C)[]) {\n        const value = this.internalConfig[key];\n        if (value !== undefined) {\n          (this as unknown as C)[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config) as (keyof C)[]) {\n        /* istanbul ignore else */\n        if (this.internalConfig[key] !== undefined) {\n          const value = (config as C)[key];\n          this.internalConfig[key] = value;\n          (this as unknown as C)[key] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener: Listener<S>) {\n    this.internalListeners.push(listener);\n  }\n\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener: Listener<S>) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state: Partial<S>, overwrite = false) {\n    this.internalState = overwrite\n      ? Object.assign({}, state as S)\n      : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n}\n\nexport default BaseControllerV1;\n"]}