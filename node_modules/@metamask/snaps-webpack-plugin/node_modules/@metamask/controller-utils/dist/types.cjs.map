{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * The names of built-in Infura networks\n */\nexport const InfuraNetworkType = {\n  mainnet: 'mainnet',\n  goerli: 'goerli',\n  sepolia: 'sepolia',\n  'linea-goerli': 'linea-goerli',\n  'linea-sepolia': 'linea-sepolia',\n  'linea-mainnet': 'linea-mainnet',\n} as const;\n\nexport type InfuraNetworkType =\n  (typeof InfuraNetworkType)[keyof typeof InfuraNetworkType];\n\n/**\n * The \"network type\"; either the name of a built-in network, or \"rpc\" for custom networks.\n */\nexport const NetworkType = {\n  ...InfuraNetworkType,\n  rpc: 'rpc',\n} as const;\n\nexport type NetworkType = (typeof NetworkType)[keyof typeof NetworkType];\n\n/**\n * A helper to determine whether a given input is NetworkType.\n *\n * @param val - the value to check whether it is NetworkType or not.\n * @returns boolean indicating whether or not the argument is NetworkType.\n */\nexport function isNetworkType(val: string): val is NetworkType {\n  return Object.values(NetworkType).includes(val as NetworkType);\n}\n\n/**\n * A type guard to determine whether the input is an InfuraNetworkType.\n *\n * @param value - The value to check.\n * @returns True if the given value is within the InfuraNetworkType enum,\n * false otherwise.\n */\nexport function isInfuraNetworkType(\n  value: unknown,\n): value is InfuraNetworkType {\n  const infuraNetworkTypes: unknown[] = Object.keys(InfuraNetworkType);\n  return infuraNetworkTypes.includes(value);\n}\n\n/**\n * Names of networks built into the wallet.\n *\n * This includes both Infura and non-Infura networks.\n */\nexport enum BuiltInNetworkName {\n  Mainnet = 'mainnet',\n  Goerli = 'goerli',\n  Sepolia = 'sepolia',\n  LineaGoerli = 'linea-goerli',\n  LineaSepolia = 'linea-sepolia',\n  LineaMainnet = 'linea-mainnet',\n  Aurora = 'aurora',\n}\n\n/**\n * Decimal string chain IDs of built-in networks, by name.\n *\n * `toHex` not invoked to avoid cyclic dependency\n */\nexport const ChainId = {\n  [BuiltInNetworkName.Mainnet]: '0x1', // toHex(1)\n  [BuiltInNetworkName.Goerli]: '0x5', // toHex(5)\n  [BuiltInNetworkName.Sepolia]: '0xaa36a7', // toHex(11155111)\n  [BuiltInNetworkName.Aurora]: '0x4e454152', // toHex(1313161554)\n  [BuiltInNetworkName.LineaGoerli]: '0xe704', // toHex(59140)\n  [BuiltInNetworkName.LineaSepolia]: '0xe705', // toHex(59141)\n  [BuiltInNetworkName.LineaMainnet]: '0xe708', // toHex(59144)\n} as const;\nexport type ChainId = (typeof ChainId)[keyof typeof ChainId];\n\nexport enum NetworksTicker {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  mainnet = 'ETH',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  goerli = 'GoerliETH',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  sepolia = 'SepoliaETH',\n  'linea-goerli' = 'LineaETH',\n  'linea-sepolia' = 'LineaETH',\n  'linea-mainnet' = 'ETH',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  rpc = '',\n}\n\nexport const BlockExplorerUrl = {\n  [BuiltInNetworkName.Mainnet]: 'https://etherscan.io',\n  [BuiltInNetworkName.Goerli]: 'https://goerli.etherscan.io',\n  [BuiltInNetworkName.Sepolia]: 'https://sepolia.etherscan.io',\n  [BuiltInNetworkName.LineaGoerli]: 'https://goerli.lineascan.build',\n  [BuiltInNetworkName.LineaSepolia]: 'https://sepolia.lineascan.build',\n  [BuiltInNetworkName.LineaMainnet]: 'https://lineascan.build',\n} as const satisfies Record<InfuraNetworkType, string>;\nexport type BlockExplorerUrl =\n  (typeof BlockExplorerUrl)[keyof typeof BlockExplorerUrl];\n\nexport const NetworkNickname = {\n  [BuiltInNetworkName.Mainnet]: 'Ethereum Mainnet',\n  [BuiltInNetworkName.Goerli]: 'Goerli',\n  [BuiltInNetworkName.Sepolia]: 'Sepolia',\n  [BuiltInNetworkName.LineaGoerli]: 'Linea Goerli',\n  [BuiltInNetworkName.LineaSepolia]: 'Linea Sepolia',\n  [BuiltInNetworkName.LineaMainnet]: 'Linea',\n} as const satisfies Record<InfuraNetworkType, string>;\nexport type NetworkNickname =\n  (typeof NetworkNickname)[keyof typeof NetworkNickname];\n\n/**\n * Makes a selection of keys in a Record optional.\n *\n * @template Type - The Record that you want to operate on.\n * @template Key - The union of keys you want to make optional.\n */\n// TODO: Move to @metamask/utils\nexport type Partialize<Type, Key extends keyof Type> = Omit<Type, Key> &\n  Partial<Pick<Type, Key>>;\n\n/** A context in which to execute a trace, in order to generate nested timings. */\nexport type TraceContext = unknown;\n\n/** Request to trace an operation. */\nexport type TraceRequest = {\n  /** Additional data to include in the trace. */\n  data?: Record<string, number | string | boolean>;\n\n  /** Name of the operation. */\n  name: string;\n\n  /**\n   * Unique identifier for the trace.\n   * Required if starting a trace and not providing a callback.\n   */\n  id?: string;\n\n  /** Trace context in which to execute the operation. */\n  parentContext?: TraceContext;\n\n  /** Additional tags to include in the trace to filter results. */\n  tags?: Record<string, number | string | boolean>;\n};\n\n/** Callback that traces the performance of an operation. */\nexport type TraceCallback = <ReturnType>(\n  /** Request to trace the performance of an operation. */\n  request: TraceRequest,\n\n  /**\n   * Callback to trace.\n   * Thrown errors will not be caught, but the trace will still be recorded.\n   * @param context - The context in which the operation is running.\n   */\n  fn?: (context?: TraceContext) => ReturnType,\n) => Promise<ReturnType>;\n"]}