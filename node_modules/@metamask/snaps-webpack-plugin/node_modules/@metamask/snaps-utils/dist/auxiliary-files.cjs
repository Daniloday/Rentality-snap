"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateAuxiliaryFiles = exports.encodeAuxiliaryFile = void 0;
const snaps_sdk_1 = require("@metamask/snaps-sdk");
const utils_1 = require("@metamask/utils");
const base64_1 = require("./base64.cjs");
const constants_1 = require("./constants.cjs");
/**
 * Re-encodes an auxiliary file if needed depending on the requested file encoding.
 *
 * @param value - The base64 value stored for the auxiliary file.
 * @param encoding - The chosen encoding.
 * @returns The file encoded in the requested encoding.
 */
async function encodeAuxiliaryFile(value, encoding) {
    // Input is assumed to be the stored file in base64.
    if (encoding === snaps_sdk_1.AuxiliaryFileEncoding.Base64) {
        return value;
    }
    // TODO: Use @metamask/utils for this
    const decoded = await (0, base64_1.decodeBase64)(value);
    if (encoding === snaps_sdk_1.AuxiliaryFileEncoding.Utf8) {
        return (0, utils_1.bytesToString)(decoded);
    }
    return (0, utils_1.bytesToHex)(decoded);
}
exports.encodeAuxiliaryFile = encodeAuxiliaryFile;
/**
 * Validate that auxiliary files used by the Snap are within size limits.
 *
 * @param files - A list of auxiliary files.
 */
function validateAuxiliaryFiles(files) {
    for (const file of files) {
        (0, utils_1.assert)(file.size < constants_1.MAX_FILE_SIZE, 'Static files required by the Snap must be smaller than 64 MB.');
    }
}
exports.validateAuxiliaryFiles = validateAuxiliaryFiles;
//# sourceMappingURL=auxiliary-files.cjs.map