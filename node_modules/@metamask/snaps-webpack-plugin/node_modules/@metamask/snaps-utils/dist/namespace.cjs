"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNamespace = exports.isAccountIdArray = exports.isAccountId = exports.isChainId = exports.isNamespaceId = exports.NamespaceIdStruct = exports.NamespaceStruct = exports.ChainStruct = exports.AccountAddressStruct = exports.AccountIdArrayStruct = exports.AccountIdStruct = exports.ChainIdStruct = exports.ChainIdStringStruct = exports.LimitedString = exports.parseAccountId = exports.parseChainId = exports.ACCOUNT_ADDRESS_REGEX = exports.ACCOUNT_ID_REGEX = exports.CHAIN_ID_REGEX = void 0;
const superstruct_1 = require("@metamask/superstruct");
exports.CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u;
exports.ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})):(?<accountAddress>[a-zA-Z0-9]{1,64})$/u;
exports.ACCOUNT_ADDRESS_REGEX = /^(?<accountAddress>[a-zA-Z0-9]{1,64})$/u;
/**
 * Parse a chain ID string to an object containing the namespace and reference.
 * This validates the chain ID before parsing it.
 *
 * @param chainId - The chain ID to validate and parse.
 * @returns The parsed chain ID.
 */
function parseChainId(chainId) {
    const match = exports.CHAIN_ID_REGEX.exec(chainId);
    if (!match?.groups) {
        throw new Error('Invalid chain ID.');
    }
    return {
        namespace: match.groups.namespace,
        reference: match.groups.reference,
    };
}
exports.parseChainId = parseChainId;
/**
 * Parse an account ID to an object containing the chain, chain ID and address.
 * This validates the account ID before parsing it.
 *
 * @param accountId - The account ID to validate and parse.
 * @returns The parsed account ID.
 */
function parseAccountId(accountId) {
    const match = exports.ACCOUNT_ID_REGEX.exec(accountId);
    if (!match?.groups) {
        throw new Error('Invalid account ID.');
    }
    return {
        address: match.groups.accountAddress,
        chainId: match.groups.chainId,
        chain: {
            namespace: match.groups.namespace,
            reference: match.groups.reference,
        },
    };
}
exports.parseAccountId = parseAccountId;
/**
 * A helper struct for a string with a minimum length of 1 and a maximum length
 * of 40.
 */
exports.LimitedString = (0, superstruct_1.size)((0, superstruct_1.string)(), 1, 40);
exports.ChainIdStringStruct = (0, superstruct_1.define)('Chain ID', (0, superstruct_1.string)().validator);
/**
 * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.
 */
exports.ChainIdStruct = (0, superstruct_1.pattern)(exports.ChainIdStringStruct, exports.CHAIN_ID_REGEX);
exports.AccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.ACCOUNT_ID_REGEX);
exports.AccountIdArrayStruct = (0, superstruct_1.array)(exports.AccountIdStruct);
exports.AccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.ACCOUNT_ADDRESS_REGEX);
/**
 * A chain descriptor.
 */
exports.ChainStruct = (0, superstruct_1.object)({
    id: exports.ChainIdStruct,
    name: exports.LimitedString,
});
exports.NamespaceStruct = (0, superstruct_1.object)({
    /**
     * A list of supported chains in the namespace.
     */
    chains: (0, superstruct_1.array)(exports.ChainStruct),
    /**
     * A list of supported RPC methods on the namespace, that a DApp can call.
     */
    methods: (0, superstruct_1.optional)((0, superstruct_1.array)(exports.LimitedString)),
    /**
     * A list of supported RPC events on the namespace, that a DApp can listen to.
     */
    events: (0, superstruct_1.optional)((0, superstruct_1.array)(exports.LimitedString)),
});
/**
 * A CAIP-2 namespace, i.e., the first part of a chain ID.
 */
exports.NamespaceIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^[-a-z0-9]{3,8}$/u);
/**
 * Check if the given value is a CAIP-2 namespace ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-2 namespace ID.
 */
function isNamespaceId(value) {
    return (0, superstruct_1.is)(value, exports.NamespaceIdStruct);
}
exports.isNamespaceId = isNamespaceId;
/**
 * Check if the given value is a CAIP-2 chain ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-2 chain ID.
 */
function isChainId(value) {
    return (0, superstruct_1.is)(value, exports.ChainIdStruct);
}
exports.isChainId = isChainId;
/**
 * Check if the given value is a CAIP-10 account ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-10 account ID.
 */
function isAccountId(value) {
    return (0, superstruct_1.is)(value, exports.AccountIdStruct);
}
exports.isAccountId = isAccountId;
/**
 * Check if the given value is an array of CAIP-10 account IDs.
 *
 * @param value - The value to check.
 * @returns Whether the value is an array of CAIP-10 account IDs.
 */
function isAccountIdArray(value) {
    return (0, superstruct_1.is)(value, exports.AccountIdArrayStruct);
}
exports.isAccountIdArray = isAccountIdArray;
/**
 * Check if a value is a {@link Namespace}.
 *
 * @param value - The value to validate.
 * @returns True if the value is a valid {@link Namespace}.
 */
function isNamespace(value) {
    return (0, superstruct_1.is)(value, exports.NamespaceStruct);
}
exports.isNamespace = isNamespace;
//# sourceMappingURL=namespace.cjs.map