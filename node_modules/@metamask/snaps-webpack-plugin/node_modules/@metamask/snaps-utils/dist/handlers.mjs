import { ComponentOrElementStruct, SeverityLevel } from "@metamask/snaps-sdk";
import { assign, literal, nullable, object, optional, string, array, size, union } from "@metamask/superstruct";
import { HandlerType } from "./handler-types.mjs";
export const SNAP_EXPORTS = {
    [HandlerType.OnRpcRequest]: {
        type: HandlerType.OnRpcRequest,
        required: true,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnTransaction]: {
        type: HandlerType.OnTransaction,
        required: true,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnCronjob]: {
        type: HandlerType.OnCronjob,
        required: true,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnNameLookup]: {
        type: HandlerType.OnNameLookup,
        required: true,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnInstall]: {
        type: HandlerType.OnInstall,
        required: false,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnUpdate]: {
        type: HandlerType.OnUpdate,
        required: false,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnKeyringRequest]: {
        type: HandlerType.OnKeyringRequest,
        required: true,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnHomePage]: {
        type: HandlerType.OnHomePage,
        required: true,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnSignature]: {
        type: HandlerType.OnSignature,
        required: true,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
    [HandlerType.OnUserInput]: {
        type: HandlerType.OnUserInput,
        required: false,
        validator: (snapExport) => {
            return typeof snapExport === 'function';
        },
    },
};
export const OnTransactionSeverityResponseStruct = object({
    severity: optional(literal(SeverityLevel.Critical)),
});
export const OnTransactionResponseWithIdStruct = assign(OnTransactionSeverityResponseStruct, object({
    id: string(),
}));
export const OnTransactionResponseWithContentStruct = assign(OnTransactionSeverityResponseStruct, object({
    content: ComponentOrElementStruct,
}));
export const OnTransactionResponseStruct = nullable(union([
    OnTransactionResponseWithContentStruct,
    OnTransactionResponseWithIdStruct,
]));
export const OnSignatureResponseStruct = OnTransactionResponseStruct;
export const OnHomePageResponseWithContentStruct = object({
    content: ComponentOrElementStruct,
});
export const OnHomePageResponseWithIdStruct = object({
    id: string(),
});
export const OnHomePageResponseStruct = union([
    OnHomePageResponseWithContentStruct,
    OnHomePageResponseWithIdStruct,
]);
export const AddressResolutionStruct = object({
    protocol: string(),
    resolvedDomain: string(),
});
export const DomainResolutionStruct = object({
    protocol: string(),
    resolvedAddress: string(),
    domainName: string(),
});
export const AddressResolutionResponseStruct = object({
    resolvedDomains: size(array(AddressResolutionStruct), 1, Infinity),
});
export const DomainResolutionResponseStruct = object({
    resolvedAddresses: size(array(DomainResolutionStruct), 1, Infinity),
});
export const OnNameLookupResponseStruct = nullable(union([AddressResolutionResponseStruct, DomainResolutionResponseStruct]));
//# sourceMappingURL=handlers.mjs.map