function $importDefault(module) {
    if (module?.__esModule) {
        return module.default;
    }
    return module;
}
import $deepEqual from "fast-deep-equal";
const deepEqual = $importDefault($deepEqual);
import { deepClone } from "../../deep-clone.mjs";
import { NpmSnapFileNames } from "../../types.mjs";
/**
 * Check if the repository object in manifest is the same as in package.json.
 */
export const repositoryMatch = {
    severity: 'error',
    semanticCheck(files, context) {
        const packageJsonRepository = files.packageJson.result.repository;
        const manifestRepository = files.manifest.result.repository;
        if ((packageJsonRepository || manifestRepository) &&
            !deepEqual(packageJsonRepository, manifestRepository)) {
            context.report(`"${NpmSnapFileNames.Manifest}" "repository" field does not match the "${NpmSnapFileNames.PackageJson}" "repository" field.`, ({ manifest }) => {
                manifest.repository = packageJsonRepository
                    ? deepClone(packageJsonRepository)
                    : undefined;
                return { manifest };
            });
        }
    },
};
//# sourceMappingURL=repository-match.mjs.map