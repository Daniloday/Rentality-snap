{"version":3,"file":"bytes.mjs","sourceRoot":"","sources":["../src/bytes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,wBAAwB;AAEhD,OAAO,EAAE,WAAW,EAAE,uCAAmC;AAEzD;;;;;GAKG;AACH,MAAM,UAAU,QAAQ,CAAC,KAAwC;IAC/D,6CAA6C;IAC7C,oDAAoD;IACpD,MAAM,SAAS,GAAG,KAAK,YAAY,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;IAErE,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,CAAC;QAClC,OAAO,aAAa,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { stringToBytes } from '@metamask/utils';\n\nimport { VirtualFile } from './virtual-file/VirtualFile';\n\n/**\n * Convert a bytes-like input value to a Uint8Array.\n *\n * @param bytes - A bytes-like value.\n * @returns The input value converted to a Uint8Array if necessary.\n */\nexport function getBytes(bytes: VirtualFile | Uint8Array | string): Uint8Array {\n  // Unwrap VirtualFiles to extract the content\n  // The content is then either a string or Uint8Array\n  const unwrapped = bytes instanceof VirtualFile ? bytes.value : bytes;\n\n  if (typeof unwrapped === 'string') {\n    return stringToBytes(unwrapped);\n  }\n\n  return unwrapped;\n}\n"]}