import { hasProperty } from "@metamask/utils";
import { CaveatSpecificationMismatchError, UnrecognizedCaveatTypeError } from "./errors.mjs";
import { PermissionType } from "./Permission.mjs";
/**
 * Determines whether a caveat specification is a restricted method caveat specification.
 *
 * @param specification - The caveat specification.
 * @returns True if the caveat specification is a restricted method caveat specification, otherwise false.
 */
export function isRestrictedMethodCaveatSpecification(specification) {
    return hasProperty(specification, 'decorator');
}
/**
 * Decorate a restricted method implementation with its caveats.
 *
 * Note that all caveat functions (i.e. the argument and return value of the
 * decorator) must be awaited.
 *
 * @param methodImplementation - The restricted method implementation
 * @param permission - The origin's potential permission
 * @param caveatSpecifications - All caveat implementations
 * @returns The decorated method implementation
 */
export function decorateWithCaveats(methodImplementation, permission, // bound to the requesting origin
caveatSpecifications) {
    const { caveats } = permission;
    if (!caveats) {
        return methodImplementation;
    }
    let decorated = async (args) => methodImplementation(args);
    for (const caveat of caveats) {
        const specification = caveatSpecifications[caveat.type];
        if (!specification) {
            throw new UnrecognizedCaveatTypeError(caveat.type);
        }
        if (!isRestrictedMethodCaveatSpecification(specification)) {
            throw new CaveatSpecificationMismatchError(specification, PermissionType.RestrictedMethod);
        }
        decorated = specification.decorator(decorated, caveat);
    }
    return decorated;
}
//# sourceMappingURL=Caveat.mjs.map