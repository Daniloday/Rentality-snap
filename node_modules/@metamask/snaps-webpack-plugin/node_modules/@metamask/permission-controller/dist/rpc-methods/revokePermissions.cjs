"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokePermissionsHandler = void 0;
const utils_1 = require("@metamask/utils");
const errors_1 = require("../errors.cjs");
const utils_2 = require("../utils.cjs");
exports.revokePermissionsHandler = {
    methodNames: [utils_2.MethodNames.RevokePermissions],
    implementation: revokePermissionsImplementation,
    hookNames: {
        revokePermissionsForOrigin: true,
    },
};
/**
 * Revoke Permissions implementation to be used in JsonRpcEngine middleware.
 *
 * @param req - The JsonRpcEngine request
 * @param res - The JsonRpcEngine result object
 * @param _next - JsonRpcEngine next() callback - unused
 * @param end - JsonRpcEngine end() callback
 * @param options - Method hooks passed to the method implementation
 * @param options.revokePermissionsForOrigin - A hook that revokes given permission keys for an origin
 * @returns A promise that resolves to nothing
 */
async function revokePermissionsImplementation(req, res, _next, end, { revokePermissionsForOrigin }) {
    const { params } = req;
    const param = params?.[0];
    if (!param) {
        return end((0, errors_1.invalidParams)({ data: { request: req } }));
    }
    // For now, this API revokes the entire permission key
    // even if caveats are specified.
    const permissionKeys = Object.keys(param);
    if (!(0, utils_1.isNonEmptyArray)(permissionKeys)) {
        return end((0, errors_1.invalidParams)({ data: { request: req } }));
    }
    revokePermissionsForOrigin(permissionKeys);
    res.result = null;
    return end();
}
//# sourceMappingURL=revokePermissions.cjs.map